package kpu.fs.alpha;


import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class JFrame_App extends javax.swing.JFrame {

    
    /**
     * Creates new form JFrame_App
     */
    public JFrame_App() {
        setExtendedState(JFrame_App.MAXIMIZED_BOTH);   
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CourseEditDialog = new javax.swing.JDialog();
        jPanel14 = new javax.swing.JPanel();
        EditCourseIDTF = new javax.swing.JTextField();
        EditCourseNameTF = new javax.swing.JTextField();
        EditProgramComboB = new javax.swing.JComboBox<>();
        EditCourseYearComboB = new javax.swing.JComboBox<>();
        EditComputersNeededCheckB = new javax.swing.JCheckBox();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        EditCourseChange = new javax.swing.JButton();
        TeacherEditDialog = new javax.swing.JDialog();
        jPanel13 = new javax.swing.JPanel();
        EditKPUIDTF = new javax.swing.JTextField();
        EditFirstNameTF = new javax.swing.JTextField();
        EditLastNameTF = new javax.swing.JTextField();
        EditTeacherChange = new javax.swing.JButton();
        EditAddSelectedCourse = new javax.swing.JButton();
        EditRemoveSelectedCourse = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        EditCoursesAvalibleTable = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        EditTeachableCoursesTable = new javax.swing.JTable();
        LocationEditDialog = new javax.swing.JDialog();
        jPanel12 = new javax.swing.JPanel();
        EditCampusComboB = new javax.swing.JComboBox<>();
        EditRoomNumberTF = new javax.swing.JTextField();
        EditComputersAvalibleCheckB = new javax.swing.JCheckBox();
        EditAddLocation = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        SemesterEditDialog = new javax.swing.JDialog();
        jPanel15 = new javax.swing.JPanel();
        EditAddSemester = new javax.swing.JButton();
        EditYearTF = new javax.swing.JTextField();
        EditSeasonComboB = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        SectionEditDialog = new javax.swing.JDialog();
        jPanel16 = new javax.swing.JPanel();
        EditSemesterComboB = new javax.swing.JComboBox<>();
        EditCourseComboB = new javax.swing.JComboBox<>();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        EditTeacherComboB = new javax.swing.JComboBox<>();
        EditLocationComboB = new javax.swing.JComboBox<>();
        EditSectionLoactionCheckB = new javax.swing.JCheckBox();
        EditSectionTimeComboB = new javax.swing.JComboBox<>();
        EditSectionTeacherCheckB = new javax.swing.JCheckBox();
        jLabel38 = new javax.swing.JLabel();
        EditSectionTimeCheckB = new javax.swing.JCheckBox();
        EditAddSection = new javax.swing.JButton();
        EditCRNIDTF = new javax.swing.JTextField();
        EditSectionIDTF = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        TabbedPane = new javax.swing.JTabbedPane();
        SchedulePanel = new javax.swing.JPanel();
        Image_ScheduleTop = new javax.swing.JLabel();
        Image_ScheduleMini = new javax.swing.JLabel();
        Image_ScheduleLeft = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        SchedulueTable = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ScheduleTeacherSectionsTable = new javax.swing.JTable();
        ScheduleTeacherComboB = new javax.swing.JComboBox<>();
        ScheduleSemesterComboB = new javax.swing.JComboBox<>();
        RefreshSchedule = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        AutoSectionsToLocations = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton19 = new javax.swing.JButton();
        AutoSectionsToTeachers = new javax.swing.JButton();
        AutoSchedulingProgressBar = new javax.swing.JProgressBar();
        SectionPanel = new javax.swing.JPanel();
        Image_SectionTop = new javax.swing.JLabel();
        Image_SectionMini = new javax.swing.JLabel();
        Image_SectionLeft = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(40, 200), new java.awt.Dimension(40, 200), new java.awt.Dimension(40, 200));
        jPanel5 = new javax.swing.JPanel();
        RefreshSection = new javax.swing.JButton();
        EditSection = new javax.swing.JButton();
        RemoveSection = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        SectionTable = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        SemesterComboB = new javax.swing.JComboBox<>();
        CourseComboB = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        TeacherComboB = new javax.swing.JComboBox<>();
        LocationComboB = new javax.swing.JComboBox<>();
        jCheckBox1 = new javax.swing.JCheckBox();
        SectionTimeComboB = new javax.swing.JComboBox<>();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel24 = new javax.swing.JLabel();
        jCheckBox4 = new javax.swing.JCheckBox();
        AddSection = new javax.swing.JButton();
        CRNIDTF = new javax.swing.JTextField();
        SectionIDTF = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        RefreshSectionAddition = new javax.swing.JButton();
        TeacherPanel = new javax.swing.JPanel();
        Image_TeacherTop = new javax.swing.JLabel();
        Image_TeacherMini = new javax.swing.JLabel();
        Image_TeacherLeft = new javax.swing.JLabel();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(40, 200), new java.awt.Dimension(40, 200), new java.awt.Dimension(40, 200));
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TeacherTable = new javax.swing.JTable();
        TeacherRefresh = new javax.swing.JButton();
        EditTeacher = new javax.swing.JButton();
        RemoveTeacher = new javax.swing.JButton();
        ShowTeacherClasses = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        TeacherCoursesTable = new javax.swing.JTable();
        jPanel11 = new javax.swing.JPanel();
        KPUIDTF = new javax.swing.JTextField();
        FirstNameTF = new javax.swing.JTextField();
        LastNameTF = new javax.swing.JTextField();
        AddTeacher = new javax.swing.JButton();
        AddSelectedCourse = new javax.swing.JButton();
        RemoveSelectedCourse = new javax.swing.JButton();
        RefreshTeacherTwo = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        CoursesAvalibleTable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        TeachableCoursesTable = new javax.swing.JTable();
        CoursePanel = new javax.swing.JPanel();
        Image_CourseTop = new javax.swing.JLabel();
        Image_CourseMini = new javax.swing.JLabel();
        Image_CourseLeft = new javax.swing.JLabel();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(40, 200), new java.awt.Dimension(40, 200), new java.awt.Dimension(40, 200));
        jPanel4 = new javax.swing.JPanel();
        CourseRefresh = new javax.swing.JButton();
        CourseEdit = new javax.swing.JButton();
        CourseRemove = new javax.swing.JButton();
        CourseScrollPane = new javax.swing.JScrollPane();
        CourseTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        CourseIDTF = new javax.swing.JTextField();
        CourseNameTF = new javax.swing.JTextField();
        ProgramComboB = new javax.swing.JComboBox<>();
        CourseYearComboB = new javax.swing.JComboBox<>();
        ComputersNeededCheckB = new javax.swing.JCheckBox();
        CourseAdd = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        SemesterLocationPanel = new javax.swing.JPanel();
        Image_SemesterLocationTop = new javax.swing.JLabel();
        Image_SemesterLocationMini = new javax.swing.JLabel();
        Image_SemesterLocationLeft = new javax.swing.JLabel();
        SemesterPanel = new javax.swing.JPanel();
        SemesterScrollPane = new javax.swing.JScrollPane();
        SemesterTable = new javax.swing.JTable();
        RefreshSemester = new javax.swing.JButton();
        EditSemester = new javax.swing.JButton();
        RemoveSemester = new javax.swing.JButton();
        LocationPanel = new javax.swing.JPanel();
        RefreshLocation = new javax.swing.JButton();
        EditLocation = new javax.swing.JButton();
        RemoveLocation = new javax.swing.JButton();
        LocationScrollPane = new javax.swing.JScrollPane();
        LocationTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        AddSemester = new javax.swing.JButton();
        YearTF = new javax.swing.JTextField();
        SeasonComboB = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        CampusComboB = new javax.swing.JComboBox<>();
        RoomNumberTF = new javax.swing.JTextField();
        ComputersAvalibleCheckB = new javax.swing.JCheckBox();
        AddLocation = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();

        CourseEditDialog.setMinimumSize(new java.awt.Dimension(390, 650));

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Create Course ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        EditProgramComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Anthropology", "Arts", "Asian Studies", "Counselling", "Creative Writing", "Criminology", "Education Assistant", "English", "Fine Arts", "General Studies", "Geography", "History", "Indigenous Community Justice", "Journalism", "Language and Cultures", "Music", "NGOs & Nonprofit Studies", "Philosohy", "Policy Studies", "Political Science", "Psychology", "Sociology", "Accounting", "Business Administration", "Business General Studies", "Business Management", "Computer Information Systems", "Economics", "Entrepreneurial Leadership", "Human Resources Management", "Information Technology", "Legal Administrative Studies", "Marketing", "Operations & Supply Chain Management", "Public Relations", "Technical Management & Services", "Fashion & Technology", "Fashion Marketing", "Foundations in Design", "Graphic Design for Marketing", "Interior Design", "Product Design", "Technical Apparel Design", "Health Care Assistant", "Health Foundations", "Health Unit Coordinator", "Nursing", "Psychiatric Nursing", "Traditional Chinese Medicine - Acupuncture", "Biology", "Brewing and Brewery Operations", "Chemistry", "Computer Aided Design & Drafting", "Engineering", "Environmental Protection Technology", "General Science", "Health Science", "Horticulture", "Mathematics", "Physics", "Plant Health", "Sustainable Agriculture", "Urban Ecosystems", "Advanced Farrier Training", "Appliance Servicing", "Automotive Service Technician", "Carpentry/Building Construction", "Construction Electrician", "Masonry", "Metal Fabrication/Fitter", "Millwright/Industrial Mechanic", "Outdoor Power Equipment Technician", "Parts", "Warehousing", "Logistics & Distribution", "Plumbing and Piping", "Plumbing", "Power Line Technician", "Public Safety Communications", "Welding", "Arborist Technician", "Automotive Service Technician", "Building Envelope Technician", "Carpentry/Building Construction", "Climbing Arborist", "Construction Electrician", "Industrial Mechanic/Millwright", "Landscape Horticulture", "Metal Fabrication", "Parts & Warehousing", "Plumbing", "Production Horticulture", "Welding" }));

        EditCourseYearComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Year 1", "Year 2", "Year 3", "Year 4" }));

        EditComputersNeededCheckB.setText("Computers Needed");

        jLabel30.setText("Course ID");

        jLabel31.setText("Course Name");

        jLabel32.setText("Program");

        jLabel33.setText("Course Year");

        EditCourseChange.setText("Save Changes");
        EditCourseChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditCourseChangeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel30)
                            .addComponent(jLabel32)
                            .addComponent(EditCourseIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel31)
                            .addComponent(EditCourseNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EditComputersNeededCheckB)
                            .addComponent(jLabel33)
                            .addComponent(EditProgramComboB, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EditCourseYearComboB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 192, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(EditCourseChange)))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditCourseIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel31)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditCourseNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel32)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditProgramComboB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditCourseYearComboB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(EditComputersNeededCheckB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 195, Short.MAX_VALUE)
                .addComponent(EditCourseChange)
                .addContainerGap())
        );

        javax.swing.GroupLayout CourseEditDialogLayout = new javax.swing.GroupLayout(CourseEditDialog.getContentPane());
        CourseEditDialog.getContentPane().setLayout(CourseEditDialogLayout);
        CourseEditDialogLayout.setHorizontalGroup(
            CourseEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CourseEditDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );
        CourseEditDialogLayout.setVerticalGroup(
            CourseEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CourseEditDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TeacherEditDialog.setMinimumSize(new java.awt.Dimension(390, 600));

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(" Create Teacher "));

        EditFirstNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditFirstNameTFActionPerformed(evt);
            }
        });

        EditTeacherChange.setText("Save Changes");
        EditTeacherChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditTeacherChangeActionPerformed(evt);
            }
        });

        EditAddSelectedCourse.setText("Add Selected");
        EditAddSelectedCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditAddSelectedCourseActionPerformed(evt);
            }
        });

        EditRemoveSelectedCourse.setText("Remove Selected");
        EditRemoveSelectedCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditRemoveSelectedCourseActionPerformed(evt);
            }
        });

        jLabel25.setText("KPU ID");

        jLabel28.setText("First Name");

        jLabel29.setText("Last Name");

        EditCoursesAvalibleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Courses Avalible"
            }
        ));
        jScrollPane7.setViewportView(EditCoursesAvalibleTable);

        EditTeachableCoursesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Teachable Courses"
            }
        ));
        jScrollPane8.setViewportView(EditTeachableCoursesTable);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(EditAddSelectedCourse, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel25)
                            .addComponent(EditKPUIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel28)
                            .addComponent(EditFirstNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel29)
                            .addComponent(EditLastNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(EditRemoveSelectedCourse, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EditTeacherChange, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditKPUIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel28)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditFirstNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditLastNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EditAddSelectedCourse)
                    .addComponent(EditRemoveSelectedCourse))
                .addGap(18, 18, 18)
                .addComponent(EditTeacherChange)
                .addContainerGap())
        );

        javax.swing.GroupLayout TeacherEditDialogLayout = new javax.swing.GroupLayout(TeacherEditDialog.getContentPane());
        TeacherEditDialog.getContentPane().setLayout(TeacherEditDialogLayout);
        TeacherEditDialogLayout.setHorizontalGroup(
            TeacherEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TeacherEditDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        TeacherEditDialogLayout.setVerticalGroup(
            TeacherEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TeacherEditDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        LocationEditDialog.setMinimumSize(new java.awt.Dimension(350, 400));

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Add Location ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        EditCampusComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Surrey", "Richmond", "Langley", "Cloverdale" }));

        EditComputersAvalibleCheckB.setText("Computers Avalible");

        EditAddLocation.setText("Save Changes");
        EditAddLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditAddLocationActionPerformed(evt);
            }
        });

        jLabel16.setText("Campus");

        jLabel17.setText("Room Number");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(EditComputersAvalibleCheckB)
                            .addComponent(jLabel17)
                            .addComponent(EditRoomNumberTF, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 211, Short.MAX_VALUE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(EditAddLocation))
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addComponent(EditCampusComboB, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditCampusComboB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditRoomNumberTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(EditComputersAvalibleCheckB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(EditAddLocation)
                .addContainerGap())
        );

        javax.swing.GroupLayout LocationEditDialogLayout = new javax.swing.GroupLayout(LocationEditDialog.getContentPane());
        LocationEditDialog.getContentPane().setLayout(LocationEditDialogLayout);
        LocationEditDialogLayout.setHorizontalGroup(
            LocationEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LocationEditDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(40, 40, 40))
        );
        LocationEditDialogLayout.setVerticalGroup(
            LocationEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LocationEditDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        SemesterEditDialog.setMinimumSize(new java.awt.Dimension(370, 450));

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Add Semester ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        EditAddSemester.setText("Save Changes");
        EditAddSemester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditAddSemesterActionPerformed(evt);
            }
        });

        EditSeasonComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Spring", "Summer", "Fall", "Winter" }));

        jLabel18.setText("Year");

        jLabel19.setText("Season");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(EditSeasonComboB, 0, 93, Short.MAX_VALUE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(EditYearTF))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap(217, Short.MAX_VALUE)
                .addComponent(EditAddSemester)
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditYearTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditSeasonComboB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                .addComponent(EditAddSemester)
                .addContainerGap())
        );

        javax.swing.GroupLayout SemesterEditDialogLayout = new javax.swing.GroupLayout(SemesterEditDialog.getContentPane());
        SemesterEditDialog.getContentPane().setLayout(SemesterEditDialogLayout);
        SemesterEditDialogLayout.setHorizontalGroup(
            SemesterEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SemesterEditDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(31, 31, 31))
        );
        SemesterEditDialogLayout.setVerticalGroup(
            SemesterEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SemesterEditDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        SectionEditDialog.setMinimumSize(new java.awt.Dimension(500, 500));

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Create Section ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        EditSemesterComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Refresh Data>" }));

        EditCourseComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Refresh Data>" }));

        jLabel34.setText("Course");

        jLabel35.setText("Semester");

        jLabel36.setText("Location");

        jLabel37.setText("Teacher");

        EditTeacherComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Refresh Data>" }));

        EditLocationComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Refresh Data>" }));

        EditSectionLoactionCheckB.setText("No Location");

        EditSectionTimeComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Monday 7am - 9:50am", "Monday 10am - 12:50pm", "Monday 1pm - 3:50pm", "Monday 4pm - 6:50pm", "Monday 7pm - 9:50pm", "Tuesday 7am - 9:50am", "Tuesday 10am - 12:50pm", "Tuesday 1pm - 3:50pm", "Tuesday 4pm - 6:50pm", "Tuesday 7pm - 9:50pm", "Wednesday 7am - 9:50am", "Wednesday 10am - 12:50pm", "Wednesday 1pm - 3:50pm", "Wednesday 4pm - 6:50pm", "Wednesday 7pm - 9:50pm", "Thursday 7am - 9:50am", "Thursday 10am - 12:50pm", "Thursday 1pm - 3:50pm", "Thursday 4pm - 6:50pm", "Thursday 7pm - 9:50pm", "Friday 7am - 9:50am", "Friday 10am - 12:50pm", "Friday 1pm - 3:50pm", "Friday 4pm - 6:50pm", "Friday 7pm - 9:50pm" }));

        EditSectionTeacherCheckB.setText("No Teacher");

        jLabel38.setText("Time Slot");

        EditSectionTimeCheckB.setText("No Time Slot");

        EditAddSection.setText("Save Changes");
        EditAddSection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditAddSectionActionPerformed(evt);
            }
        });

        jLabel39.setText("CRN ID");

        jLabel40.setText("Section ID");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel37)
                            .addComponent(jLabel38)
                            .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(EditAddSection)
                                .addGroup(jPanel16Layout.createSequentialGroup()
                                    .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(EditSectionTimeCheckB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel39, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(EditTeacherComboB, javax.swing.GroupLayout.Alignment.LEADING, 0, 120, Short.MAX_VALUE)
                                        .addComponent(EditSectionTeacherCheckB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGap(80, 80, 80)
                                    .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel36)
                                        .addComponent(jLabel40)
                                        .addComponent(jLabel34)
                                        .addComponent(EditSectionIDTF)
                                        .addComponent(EditCourseComboB, 0, 120, Short.MAX_VALUE)
                                        .addComponent(EditLocationComboB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(EditSectionLoactionCheckB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(EditSectionTimeComboB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 8, Short.MAX_VALUE))
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel35)
                            .addComponent(EditCRNIDTF)
                            .addComponent(EditSemesterComboB, 0, 120, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(jLabel40))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EditCRNIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EditSectionIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(jLabel34))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EditSemesterComboB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EditCourseComboB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(jLabel36))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EditLocationComboB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EditTeacherComboB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EditSectionLoactionCheckB)
                    .addComponent(EditSectionTeacherCheckB))
                .addGap(18, 18, 18)
                .addComponent(jLabel38)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditSectionTimeComboB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditSectionTimeCheckB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditAddSection)
                .addContainerGap(155, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout SectionEditDialogLayout = new javax.swing.GroupLayout(SectionEditDialog.getContentPane());
        SectionEditDialog.getContentPane().setLayout(SectionEditDialogLayout);
        SectionEditDialogLayout.setHorizontalGroup(
            SectionEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SectionEditDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SectionEditDialogLayout.setVerticalGroup(
            SectionEditDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SectionEditDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("KPU Faculty Scheduler");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        TabbedPane.setBackground(new java.awt.Color(153, 153, 153));
        TabbedPane.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        TabbedPane.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        TabbedPane.setPreferredSize(new java.awt.Dimension(1385, 735));

        SchedulePanel.setPreferredSize(new java.awt.Dimension(1385, 704));

        Image_ScheduleTop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpu/fs/alpha/Image_Banner.gif"))); // NOI18N

        Image_ScheduleMini.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpu/fs/alpha/Image_Black.png"))); // NOI18N

        Image_ScheduleLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpu/fs/alpha/Image_RedBG.png"))); // NOI18N
        Image_ScheduleLeft.setMaximumSize(new java.awt.Dimension(200, 200));
        Image_ScheduleLeft.setMinimumSize(new java.awt.Dimension(200, 200));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Schedule"));

        SchedulueTable.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        SchedulueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"7am - 9:50am", "", null, null, null, null, null},
                {"10am - 12:50pm", null, null, null, null, null, null},
                {"1pm - 3:50pm", null, null, null, null, null, null},
                {"4pm - 6:50pm", null, null, null, null, null, null},
                {"7pm - 9:50pm", null, null, null, null, null, null}
            },
            new String [] {
                "Times", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "No Date"
            }
        ));
        SchedulueTable.setColumnSelectionAllowed(true);
        SchedulueTable.setRowHeight(50);
        SchedulueTable.setSelectionBackground(new java.awt.Color(0, 153, 204));
        SchedulueTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane9.setViewportView(SchedulueTable);
        SchedulueTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 1147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(" Teacher's Info "));

        ScheduleTeacherSectionsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CRN ID", "Section ID", "Course ID", "Location", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ScheduleTeacherSectionsTable);

        ScheduleTeacherComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Refresh Data>" }));
        ScheduleTeacherComboB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScheduleTeacherComboBActionPerformed(evt);
            }
        });

        ScheduleSemesterComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Refresh Data>" }));
        ScheduleSemesterComboB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScheduleSemesterComboBActionPerformed(evt);
            }
        });

        RefreshSchedule.setText("Refresh Data");
        RefreshSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshScheduleActionPerformed(evt);
            }
        });

        jLabel14.setText("Teacher");

        jLabel15.setText("Semester");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ScheduleSemesterComboB, 0, 150, Short.MAX_VALUE)
                    .addComponent(ScheduleTeacherComboB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RefreshSchedule, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ScheduleTeacherComboB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ScheduleSemesterComboB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(RefreshSchedule)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Functions"));

        AutoSectionsToLocations.setText("Auto Sort Sections To Locations");
        AutoSectionsToLocations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AutoSectionsToLocationsActionPerformed(evt);
            }
        });

        jButton18.setText("PDF");

        jLabel1.setText("Sections with no Locations");

        jLabel2.setText("Sections with no Teachers");

        jButton19.setText("PDF All");

        AutoSectionsToTeachers.setText("Auto Sort Sections To Teachers");
        AutoSectionsToTeachers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AutoSectionsToTeachersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AutoSchedulingProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AutoSectionsToLocations)
                            .addComponent(AutoSectionsToTeachers)
                            .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(AutoSectionsToLocations))
                .addGap(20, 20, 20)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(AutoSectionsToTeachers))
                .addGap(18, 18, 18)
                .addComponent(AutoSchedulingProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton18)
                    .addComponent(jButton19)))
        );

        javax.swing.GroupLayout SchedulePanelLayout = new javax.swing.GroupLayout(SchedulePanel);
        SchedulePanel.setLayout(SchedulePanelLayout);
        SchedulePanelLayout.setHorizontalGroup(
            SchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SchedulePanelLayout.createSequentialGroup()
                .addGroup(SchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SchedulePanelLayout.createSequentialGroup()
                        .addComponent(Image_ScheduleLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(SchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(SchedulePanelLayout.createSequentialGroup()
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(Image_ScheduleMini, javax.swing.GroupLayout.PREFERRED_SIZE, 1380, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Image_ScheduleTop))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        SchedulePanelLayout.setVerticalGroup(
            SchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SchedulePanelLayout.createSequentialGroup()
                .addComponent(Image_ScheduleTop)
                .addGap(0, 0, 0)
                .addComponent(Image_ScheduleMini, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(SchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Image_ScheduleLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SchedulePanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(SchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(233, Short.MAX_VALUE))))
        );

        TabbedPane.addTab("     Schedule     ", SchedulePanel);

        Image_SectionTop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpu/fs/alpha/Image_Banner.gif"))); // NOI18N

        Image_SectionMini.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpu/fs/alpha/Image_Black.png"))); // NOI18N

        Image_SectionLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpu/fs/alpha/Image_RedBG.png"))); // NOI18N
        Image_SectionLeft.setMaximumSize(new java.awt.Dimension(200, 200));
        Image_SectionLeft.setMinimumSize(new java.awt.Dimension(200, 200));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Current Sections ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        RefreshSection.setText("Refresh Data");
        RefreshSection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshSectionActionPerformed(evt);
            }
        });

        EditSection.setText("Edit Section");
        EditSection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditSectionActionPerformed(evt);
            }
        });

        RemoveSection.setText("Remove Section");
        RemoveSection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveSectionActionPerformed(evt);
            }
        });

        SectionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CRN ID", "Section ID", "Course ID", "Semester", "Location", "Time Slot", "Teacher ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(SectionTable);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(RefreshSection)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(EditSection)
                        .addGap(18, 18, 18)
                        .addComponent(RemoveSection))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 761, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RefreshSection)
                    .addComponent(EditSection)
                    .addComponent(RemoveSection))
                .addContainerGap())
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Create Section ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        SemesterComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Refresh Data>" }));

        CourseComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Refresh Data>" }));

        jLabel20.setText("Course");

        jLabel21.setText("Semester");

        jLabel22.setText("Location");

        jLabel23.setText("Teacher");

        TeacherComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Refresh Data>" }));

        LocationComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Refresh Data>" }));

        jCheckBox1.setText("No Location");

        SectionTimeComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Monday 7am - 9:50am", "Monday 10am - 12:50pm", "Monday 1pm - 3:50pm", "Monday 4pm - 6:50pm", "Monday 7pm - 9:50pm", "Tuesday 7am - 9:50am", "Tuesday 10am - 12:50pm", "Tuesday 1pm - 3:50pm", "Tuesday 4pm - 6:50pm", "Tuesday 7pm - 9:50pm", "Wednesday 7am - 9:50am", "Wednesday 10am - 12:50pm", "Wednesday 1pm - 3:50pm", "Wednesday 4pm - 6:50pm", "Wednesday 7pm - 9:50pm", "Thursday 7am - 9:50am", "Thursday 10am - 12:50pm", "Thursday 1pm - 3:50pm", "Thursday 4pm - 6:50pm", "Thursday 7pm - 9:50pm", "Friday 7am - 9:50am", "Friday 10am - 12:50pm", "Friday 1pm - 3:50pm", "Friday 4pm - 6:50pm", "Friday 7pm - 9:50pm" }));

        jCheckBox2.setText("No Teacher");

        jLabel24.setText("Time Slot");

        jCheckBox4.setText("No Time Slot");

        AddSection.setText("Add Section");
        AddSection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddSectionActionPerformed(evt);
            }
        });

        jLabel26.setText("CRN ID");

        jLabel27.setText("Section ID");

        RefreshSectionAddition.setText("Refresh Data");
        RefreshSectionAddition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshSectionAdditionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(RefreshSectionAddition)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AddSection))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel26, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TeacherComboB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(80, 80, 80)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CourseComboB, 0, 118, Short.MAX_VALUE)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel22)
                                    .addComponent(jLabel27)
                                    .addComponent(jLabel20)
                                    .addComponent(jCheckBox1))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(SectionIDTF)
                            .addComponent(LocationComboB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox4)
                            .addComponent(jLabel23)
                            .addComponent(jLabel24)
                            .addComponent(jLabel21)
                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(SemesterComboB, javax.swing.GroupLayout.Alignment.LEADING, 0, 120, Short.MAX_VALUE)
                                .addComponent(CRNIDTF, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(SectionTimeComboB, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(jLabel27))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CRNIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SectionIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SemesterComboB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CourseComboB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LocationComboB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TeacherComboB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2))
                .addGap(18, 18, 18)
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SectionTimeComboB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddSection)
                    .addComponent(RefreshSectionAddition))
                .addContainerGap())
        );

        javax.swing.GroupLayout SectionPanelLayout = new javax.swing.GroupLayout(SectionPanel);
        SectionPanel.setLayout(SectionPanelLayout);
        SectionPanelLayout.setHorizontalGroup(
            SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SectionPanelLayout.createSequentialGroup()
                .addComponent(Image_SectionLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(220, 220, 220)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(SectionPanelLayout.createSequentialGroup()
                .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Image_SectionTop)
                    .addComponent(Image_SectionMini, javax.swing.GroupLayout.PREFERRED_SIZE, 1397, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SectionPanelLayout.setVerticalGroup(
            SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SectionPanelLayout.createSequentialGroup()
                .addComponent(Image_SectionTop)
                .addGap(0, 0, 0)
                .addComponent(Image_SectionMini, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filler1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Image_SectionLeft, javax.swing.GroupLayout.DEFAULT_SIZE, 753, Short.MAX_VALUE)
                    .addGroup(SectionPanelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );

        TabbedPane.addTab("     Sections     ", SectionPanel);

        Image_TeacherTop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpu/fs/alpha/Image_Banner.gif"))); // NOI18N

        Image_TeacherMini.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpu/fs/alpha/Image_Black.png"))); // NOI18N

        Image_TeacherLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpu/fs/alpha/Image_RedBG.png"))); // NOI18N
        Image_TeacherLeft.setMaximumSize(new java.awt.Dimension(200, 200));
        Image_TeacherLeft.setMinimumSize(new java.awt.Dimension(200, 200));

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Current Teachers ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        TeacherTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "KPU ID", "First Name", "Last Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(TeacherTable);

        TeacherRefresh.setText("Refresh Data");
        TeacherRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TeacherRefreshActionPerformed(evt);
            }
        });

        EditTeacher.setText("Edit Teacher");
        EditTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditTeacherActionPerformed(evt);
            }
        });

        RemoveTeacher.setText("Remove Teacher");
        RemoveTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveTeacherActionPerformed(evt);
            }
        });

        ShowTeacherClasses.setText("Show Teacher's Classes");
        ShowTeacherClasses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowTeacherClassesActionPerformed(evt);
            }
        });

        TeacherCoursesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Teachable Courses"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(TeacherCoursesTable);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(TeacherRefresh)
                        .addGap(178, 178, 178)
                        .addComponent(EditTeacher)
                        .addGap(18, 18, 18)
                        .addComponent(RemoveTeacher))
                    .addComponent(jScrollPane3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 123, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ShowTeacherClasses, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                        .addGap(7, 7, 7))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TeacherRefresh)
                    .addComponent(EditTeacher)
                    .addComponent(RemoveTeacher)
                    .addComponent(ShowTeacherClasses))
                .addContainerGap())
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Create Teacher ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        FirstNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FirstNameTFActionPerformed(evt);
            }
        });

        AddTeacher.setText("Add Teacher");
        AddTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddTeacherActionPerformed(evt);
            }
        });

        AddSelectedCourse.setText("Add Selected");
        AddSelectedCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddSelectedCourseActionPerformed(evt);
            }
        });

        RemoveSelectedCourse.setText("Remove Selected");
        RemoveSelectedCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveSelectedCourseActionPerformed(evt);
            }
        });

        RefreshTeacherTwo.setText("Refresh Data");
        RefreshTeacherTwo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshTeacherTwoActionPerformed(evt);
            }
        });

        jLabel3.setText("KPU ID");

        jLabel4.setText("First Name");

        jLabel5.setText("Last Name");

        CoursesAvalibleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Courses Avalible"
            }
        ));
        jScrollPane4.setViewportView(CoursesAvalibleTable);

        TeachableCoursesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Teachable Courses"
            }
        ));
        jScrollPane5.setViewportView(TeachableCoursesTable);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(79, 79, 79))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(LastNameTF, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FirstNameTF, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(KPUIDTF, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RefreshTeacherTwo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(AddSelectedCourse, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(RemoveSelectedCourse, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(AddTeacher, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(KPUIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FirstNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LastNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RemoveSelectedCourse)
                    .addComponent(AddSelectedCourse))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddTeacher)
                    .addComponent(RefreshTeacherTwo))
                .addContainerGap())
        );

        javax.swing.GroupLayout TeacherPanelLayout = new javax.swing.GroupLayout(TeacherPanel);
        TeacherPanel.setLayout(TeacherPanelLayout);
        TeacherPanelLayout.setHorizontalGroup(
            TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TeacherPanelLayout.createSequentialGroup()
                .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Image_TeacherTop)
                    .addComponent(Image_TeacherMini, javax.swing.GroupLayout.PREFERRED_SIZE, 1380, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(TeacherPanelLayout.createSequentialGroup()
                .addComponent(Image_TeacherLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filler6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        TeacherPanelLayout.setVerticalGroup(
            TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TeacherPanelLayout.createSequentialGroup()
                .addComponent(Image_TeacherTop)
                .addGap(0, 0, 0)
                .addComponent(Image_TeacherMini, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Image_TeacherLeft, javax.swing.GroupLayout.DEFAULT_SIZE, 753, Short.MAX_VALUE)
                    .addComponent(filler6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(TeacherPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );

        TabbedPane.addTab("     Teachers     ", TeacherPanel);

        Image_CourseTop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpu/fs/alpha/Image_Banner.gif"))); // NOI18N

        Image_CourseMini.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpu/fs/alpha/Image_Black.png"))); // NOI18N

        Image_CourseLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpu/fs/alpha/Image_RedBG.png"))); // NOI18N
        Image_CourseLeft.setMaximumSize(new java.awt.Dimension(200, 200));
        Image_CourseLeft.setMinimumSize(new java.awt.Dimension(200, 200));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Current Courses ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        CourseRefresh.setText("Refresh Data");
        CourseRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CourseRefreshActionPerformed(evt);
            }
        });

        CourseEdit.setText("Edit Course");
        CourseEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CourseEditActionPerformed(evt);
            }
        });

        CourseRemove.setText("Remove Course");
        CourseRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CourseRemoveActionPerformed(evt);
            }
        });

        CourseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course ID", "Course Name", "Course Year", "Program", "Computers Needed"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CourseScrollPane.setViewportView(CourseTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CourseScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 821, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(CourseRefresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CourseEdit)
                        .addGap(18, 18, 18)
                        .addComponent(CourseRemove)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CourseScrollPane)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(CourseEdit)
                        .addComponent(CourseRemove))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(CourseRefresh)
                        .addContainerGap())))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Create Course ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        ProgramComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Anthropology", "Arts", "Asian Studies", "Counselling", "Creative Writing", "Criminology", "Education Assistant", "English", "Fine Arts", "General Studies", "Geography", "History", "Indigenous Community Justice", "Journalism", "Language and Cultures", "Music", "NGOs & Nonprofit Studies", "Philosohy", "Policy Studies", "Political Science", "Psychology", "Sociology", "Accounting", "Business Administration", "Business General Studies", "Business Management", "Computer Information Systems", "Economics", "Entrepreneurial Leadership", "Human Resources Management", "Information Technology", "Legal Administrative Studies", "Marketing", "Operations & Supply Chain Management", "Public Relations", "Technical Management & Services", "Fashion & Technology", "Fashion Marketing", "Foundations in Design", "Graphic Design for Marketing", "Interior Design", "Product Design", "Technical Apparel Design", "Health Care Assistant", "Health Foundations", "Health Unit Coordinator", "Nursing", "Psychiatric Nursing", "Traditional Chinese Medicine - Acupuncture", "Biology", "Brewing and Brewery Operations", "Chemistry", "Computer Aided Design & Drafting", "Engineering", "Environmental Protection Technology", "General Science", "Health Science", "Horticulture", "Mathematics", "Physics", "Plant Health", "Sustainable Agriculture", "Urban Ecosystems", "Advanced Farrier Training", "Appliance Servicing", "Automotive Service Technician", "Carpentry/Building Construction", "Construction Electrician", "Masonry", "Metal Fabrication/Fitter", "Millwright/Industrial Mechanic", "Outdoor Power Equipment Technician", "Parts", "Warehousing", "Logistics & Distribution", "Plumbing and Piping", "Plumbing", "Power Line Technician", "Public Safety Communications", "Welding", "Arborist Technician", "Automotive Service Technician", "Building Envelope Technician", "Carpentry/Building Construction", "Climbing Arborist", "Construction Electrician", "Industrial Mechanic/Millwright", "Landscape Horticulture", "Metal Fabrication", "Parts & Warehousing", "Plumbing", "Production Horticulture", "Welding" }));

        CourseYearComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Year 1", "Year 2", "Year 3", "Year 4" }));

        ComputersNeededCheckB.setText("Computers Needed");

        CourseAdd.setText("Add Course");
        CourseAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CourseAddActionPerformed(evt);
            }
        });

        jLabel6.setText("Course ID");

        jLabel7.setText("Course Name");

        jLabel8.setText("Program");

        jLabel9.setText("Course Year");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 229, Short.MAX_VALUE)
                        .addComponent(CourseAdd))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7)
                            .addComponent(jLabel9)
                            .addComponent(CourseYearComboB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ProgramComboB, 0, 0, Short.MAX_VALUE)
                            .addComponent(CourseNameTF)
                            .addComponent(CourseIDTF)
                            .addComponent(ComputersNeededCheckB, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CourseIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CourseNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ProgramComboB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CourseYearComboB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ComputersNeededCheckB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 195, Short.MAX_VALUE)
                .addComponent(CourseAdd)
                .addContainerGap())
        );

        javax.swing.GroupLayout CoursePanelLayout = new javax.swing.GroupLayout(CoursePanel);
        CoursePanel.setLayout(CoursePanelLayout);
        CoursePanelLayout.setHorizontalGroup(
            CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CoursePanelLayout.createSequentialGroup()
                .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(CoursePanelLayout.createSequentialGroup()
                        .addComponent(Image_CourseLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CoursePanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(filler5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23))
                            .addGroup(CoursePanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(Image_CourseMini, javax.swing.GroupLayout.PREFERRED_SIZE, 1397, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Image_CourseTop)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        CoursePanelLayout.setVerticalGroup(
            CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CoursePanelLayout.createSequentialGroup()
                .addComponent(Image_CourseTop)
                .addGap(0, 0, 0)
                .addComponent(Image_CourseMini, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Image_CourseLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(CoursePanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(filler5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        TabbedPane.addTab("     Courses     ", CoursePanel);

        Image_SemesterLocationTop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpu/fs/alpha/Image_Banner.gif"))); // NOI18N

        Image_SemesterLocationMini.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpu/fs/alpha/Image_Black.png"))); // NOI18N

        Image_SemesterLocationLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpu/fs/alpha/Image_RedBG.png"))); // NOI18N
        Image_SemesterLocationLeft.setMaximumSize(new java.awt.Dimension(200, 200));
        Image_SemesterLocationLeft.setMinimumSize(new java.awt.Dimension(200, 200));

        SemesterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Current Semesters ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        SemesterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Year", "Season"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SemesterTable.setColumnSelectionAllowed(true);
        SemesterScrollPane.setViewportView(SemesterTable);
        SemesterTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        RefreshSemester.setText("Refresh Data");
        RefreshSemester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshSemesterActionPerformed(evt);
            }
        });

        EditSemester.setText("Edit Semester");
        EditSemester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditSemesterActionPerformed(evt);
            }
        });

        RemoveSemester.setText("Remove Semester");
        RemoveSemester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveSemesterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SemesterPanelLayout = new javax.swing.GroupLayout(SemesterPanel);
        SemesterPanel.setLayout(SemesterPanelLayout);
        SemesterPanelLayout.setHorizontalGroup(
            SemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SemesterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SemesterPanelLayout.createSequentialGroup()
                        .addComponent(RefreshSemester)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(EditSemester)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(RemoveSemester))
                    .addComponent(SemesterScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 764, Short.MAX_VALUE))
                .addContainerGap())
        );
        SemesterPanelLayout.setVerticalGroup(
            SemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SemesterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SemesterScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(SemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RemoveSemester)
                    .addComponent(EditSemester)
                    .addComponent(RefreshSemester))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        LocationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Current Locations", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        RefreshLocation.setText("Refresh Data");
        RefreshLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshLocationActionPerformed(evt);
            }
        });

        EditLocation.setText("Edit Location");
        EditLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditLocationActionPerformed(evt);
            }
        });

        RemoveLocation.setText("Remove Location");
        RemoveLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveLocationActionPerformed(evt);
            }
        });

        LocationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Campus", "Room Number", "Computers Avialable"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        LocationTable.setColumnSelectionAllowed(true);
        LocationScrollPane.setViewportView(LocationTable);
        LocationTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout LocationPanelLayout = new javax.swing.GroupLayout(LocationPanel);
        LocationPanel.setLayout(LocationPanelLayout);
        LocationPanelLayout.setHorizontalGroup(
            LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LocationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LocationScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 764, Short.MAX_VALUE)
                    .addGroup(LocationPanelLayout.createSequentialGroup()
                        .addComponent(RefreshLocation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(EditLocation)
                        .addGap(18, 18, 18)
                        .addComponent(RemoveLocation)))
                .addContainerGap())
        );
        LocationPanelLayout.setVerticalGroup(
            LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LocationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LocationScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RefreshLocation)
                    .addComponent(EditLocation)
                    .addComponent(RemoveLocation))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Add Semester ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        AddSemester.setText("Add Semester");
        AddSemester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddSemesterActionPerformed(evt);
            }
        });

        SeasonComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Spring", "Summer", "Fall", "Winter" }));

        jLabel10.setText("Year");

        jLabel11.setText("Season");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(SeasonComboB, 0, 93, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(YearTF))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(AddSemester)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(YearTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SeasonComboB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addComponent(AddSemester)
                .addContainerGap())
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Add Location ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        CampusComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Surrey", "Richmond", "Langley", "Cloverdale" }));

        ComputersAvalibleCheckB.setText("Computers Avalible");

        AddLocation.setText("Add Location");
        AddLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddLocationActionPerformed(evt);
            }
        });

        jLabel12.setText("Campus");

        jLabel13.setText("Room Number");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ComputersAvalibleCheckB)
                            .addComponent(jLabel13)
                            .addComponent(RoomNumberTF, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 211, Short.MAX_VALUE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(AddLocation))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(CampusComboB, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CampusComboB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RoomNumberTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ComputersAvalibleCheckB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(AddLocation)
                .addContainerGap())
        );

        javax.swing.GroupLayout SemesterLocationPanelLayout = new javax.swing.GroupLayout(SemesterLocationPanel);
        SemesterLocationPanel.setLayout(SemesterLocationPanelLayout);
        SemesterLocationPanelLayout.setHorizontalGroup(
            SemesterLocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SemesterLocationPanelLayout.createSequentialGroup()
                .addComponent(Image_SemesterLocationLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(SemesterLocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(SemesterLocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SemesterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LocationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(SemesterLocationPanelLayout.createSequentialGroup()
                .addComponent(Image_SemesterLocationMini, javax.swing.GroupLayout.PREFERRED_SIZE, 1397, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(SemesterLocationPanelLayout.createSequentialGroup()
                .addComponent(Image_SemesterLocationTop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(79, 79, 79))
        );
        SemesterLocationPanelLayout.setVerticalGroup(
            SemesterLocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SemesterLocationPanelLayout.createSequentialGroup()
                .addComponent(Image_SemesterLocationTop)
                .addGap(0, 0, 0)
                .addComponent(Image_SemesterLocationMini, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(SemesterLocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Image_SemesterLocationLeft, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(SemesterLocationPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(SemesterLocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SemesterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 250, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(SemesterLocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LocationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 250, Short.MAX_VALUE))
                        .addContainerGap(217, Short.MAX_VALUE))))
        );

        TabbedPane.addTab("     Semesters & Locations     ", SemesterLocationPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CourseRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CourseRefreshActionPerformed
 
        RefreshCourse();
    }//GEN-LAST:event_CourseRefreshActionPerformed

    private void CourseEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CourseEditActionPerformed

        LoadCourse();
    }//GEN-LAST:event_CourseEditActionPerformed

    private void RefreshLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshLocationActionPerformed
        
        RefreshLocation();
    }//GEN-LAST:event_RefreshLocationActionPerformed

    private void RefreshSemesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshSemesterActionPerformed
        
        RefreshSemester();
    }//GEN-LAST:event_RefreshSemesterActionPerformed

    private void TeacherRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TeacherRefreshActionPerformed
        
        RefreshTeacher();
    }//GEN-LAST:event_TeacherRefreshActionPerformed

    private void FirstNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FirstNameTFActionPerformed
        //Oops This is Useless
    }//GEN-LAST:event_FirstNameTFActionPerformed

    private void AddSemesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddSemesterActionPerformed
        
        AddSemester();
        RefreshSemester();
    }//GEN-LAST:event_AddSemesterActionPerformed

    private void AddLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddLocationActionPerformed
        
        AddLocation();
        RefreshLocation();
    }//GEN-LAST:event_AddLocationActionPerformed

    private void RemoveSemesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveSemesterActionPerformed
        
        RemoveSemester();
        RefreshSemester();
    }//GEN-LAST:event_RemoveSemesterActionPerformed

    private void CourseAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CourseAddActionPerformed
        
        AddCourse();
        RefreshCourse();
    }//GEN-LAST:event_CourseAddActionPerformed

    private void RefreshScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshScheduleActionPerformed
        
        RefreshSchedule();
    }//GEN-LAST:event_RefreshScheduleActionPerformed

    private void RefreshSectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshSectionActionPerformed
        
        RefreshSection();
    }//GEN-LAST:event_RefreshSectionActionPerformed

    private void RemoveTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveTeacherActionPerformed
        
        RemoveTeacher();
        RefreshTeacher();
    }//GEN-LAST:event_RemoveTeacherActionPerformed

    private void CourseRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CourseRemoveActionPerformed
        
        RemoveCourse();
        RefreshCourse();
    }//GEN-LAST:event_CourseRemoveActionPerformed

    private void RemoveLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveLocationActionPerformed
        
        RemoveLocation();
        RefreshLocation();
    }//GEN-LAST:event_RemoveLocationActionPerformed

    private void ScheduleTeacherComboBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScheduleTeacherComboBActionPerformed
        
        RefreshScheduleSections();
        RefreshScheduleTable();
    }//GEN-LAST:event_ScheduleTeacherComboBActionPerformed

    private void ScheduleSemesterComboBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScheduleSemesterComboBActionPerformed
        
        RefreshScheduleSections();
        RefreshScheduleTable();
    }//GEN-LAST:event_ScheduleSemesterComboBActionPerformed

    private void EditFirstNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditFirstNameTFActionPerformed
         //Oops This is Useless
    }//GEN-LAST:event_EditFirstNameTFActionPerformed

    private void EditTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditTeacherActionPerformed
        
        LoadTeacher();
        LoadTeacherCourses_EDIT();
    }//GEN-LAST:event_EditTeacherActionPerformed

    private void EditCourseChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditCourseChangeActionPerformed
        EditCourse();
    }//GEN-LAST:event_EditCourseChangeActionPerformed

    private void AutoSectionsToLocationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AutoSectionsToLocationsActionPerformed
        
        if (ScheduleSemesterComboB.getSelectedItem().toString().equals("<Refresh Data>"))
        {
            ErrorNoData();
        }
        else
        {
            AutoAssignLocationsToSections();
        }
    }//GEN-LAST:event_AutoSectionsToLocationsActionPerformed

    private void AutoSectionsToTeachersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AutoSectionsToTeachersActionPerformed
        
        if (ScheduleSemesterComboB.getSelectedItem().toString().equals("<Refresh Data>"))
        {
            ErrorNoData();
        }
        else
        {
            AutoAssignTeachersToSections();
        }
    }//GEN-LAST:event_AutoSectionsToTeachersActionPerformed

    private void EditAddLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditAddLocationActionPerformed
        
        EditLocation();
    }//GEN-LAST:event_EditAddLocationActionPerformed

    private void EditAddSemesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditAddSemesterActionPerformed
        
        EditSemester();
    }//GEN-LAST:event_EditAddSemesterActionPerformed

    private void AddSectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddSectionActionPerformed
        
        AddSection();
        RefreshSection();
    }//GEN-LAST:event_AddSectionActionPerformed

    private void ShowTeacherClassesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowTeacherClassesActionPerformed
        
        LoadTeacherCourses();
    }//GEN-LAST:event_ShowTeacherClassesActionPerformed

    private void EditTeacherChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditTeacherChangeActionPerformed
        
        EditTeacher();
    }//GEN-LAST:event_EditTeacherChangeActionPerformed

    private void EditAddSectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditAddSectionActionPerformed
        
        EditSection();      
    }//GEN-LAST:event_EditAddSectionActionPerformed

    private void EditSemesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditSemesterActionPerformed
        
        LoadSemester();
    }//GEN-LAST:event_EditSemesterActionPerformed

    private void EditLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditLocationActionPerformed
        
        LoadLocation();
    }//GEN-LAST:event_EditLocationActionPerformed

    private void EditSectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditSectionActionPerformed
        
        
        LoadSection();
    }//GEN-LAST:event_EditSectionActionPerformed

    private void RemoveSectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveSectionActionPerformed
        
        RemoveSection();
        RefreshSection();
    }//GEN-LAST:event_RemoveSectionActionPerformed

    private void RefreshSectionAdditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshSectionAdditionActionPerformed
        
        RefreshSection_ADD();
    }//GEN-LAST:event_RefreshSectionAdditionActionPerformed

    private void RefreshTeacherTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshTeacherTwoActionPerformed
        
        RefreshTeacher_ADD();
    }//GEN-LAST:event_RefreshTeacherTwoActionPerformed

    private void AddSelectedCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddSelectedCourseActionPerformed
        
        TeacherCourse_ADD();
    }//GEN-LAST:event_AddSelectedCourseActionPerformed

    private void RemoveSelectedCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveSelectedCourseActionPerformed
        
        TeacherCourse_REMOVE();
    }//GEN-LAST:event_RemoveSelectedCourseActionPerformed

    private void EditRemoveSelectedCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditRemoveSelectedCourseActionPerformed
        
        TeacherCourse_EDIT_REMOVE();
    }//GEN-LAST:event_EditRemoveSelectedCourseActionPerformed

    private void AddTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddTeacherActionPerformed
        
        AddTeacher();
        RefreshTeacher();
    }//GEN-LAST:event_AddTeacherActionPerformed

    private void EditAddSelectedCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditAddSelectedCourseActionPerformed
        
        TeacherCourse_EDIT_ADD();
    }//GEN-LAST:event_EditAddSelectedCourseActionPerformed

    ////////////////////////////////////////////////////////////////////////////
    
    ArrayList<Main_Section> sectionList = new ArrayList<>();
    ArrayList<Main_Section> sectionSortedList = new ArrayList<>();
    
    ArrayList<Main_Course> courseList = new ArrayList<>();
    ArrayList<Main_Course> courseSortedList = new ArrayList<>();
    
    ArrayList<Main_Teacher> teacherList = new ArrayList<>();
    ArrayList<Main_Teacher> teacherSortedList = new ArrayList<>();
    
    ArrayList<Main_Semester> semesterList = new ArrayList<>();
    ArrayList<Main_Semester> semesterSortedList = new ArrayList<>();
    
    ArrayList<Main_Location> locationList = new ArrayList<>();
    ArrayList<Main_Location> locationSortedList = new ArrayList<>();
    
   
    ////////////////////////////////////////////////////////////////////////////
    
    private void AutoAssignTeachersToSections()
    {
        
    }
    
    private void AutoAssignLocationsToSections()
    {
        JOptionPane.showMessageDialog(null, "Start");
   
        Main_Section section;
        Main_Course course;
        Main_Semester semester;
        Main_Location location;
        Main_Time time;
        
        int ProgressBarIndex = 0;
        int counter = 0;
        int counter2 = 0;
        int counter3 = 0;
        int SavedCounter = 0;
        int SectionsWithNoCourses = 0;
        int SemesterIndex = ScheduleSemesterComboB.getSelectedIndex();
        semester = semesterList.get(SemesterIndex);

        //SORT THE SECTION LOCATION INTERECTION
        Sort_SectionList_LOCATION(semester);
        
        JOptionPane.showMessageDialog(null, "Section_List_Sorted, Size: " + sectionSortedList.size());
        
        ProgressBarIndex = ProgressBarIndex + 10;
        AutoSchedulingProgressBar.setValue(ProgressBarIndex);
  
        //GIVE THESE SECTIONS A LOCATION / TIME
        while (sectionSortedList.size() > counter)
        {
            JOptionPane.showMessageDialog(null, "Section_List_Sorted MAIN LOOP START");
            section = sectionSortedList.get(counter);
                    
            course = section.getCourse();
            
            String CourseID = course.getCourseID();
            
            course = CourseIDReference(CourseID);
            
            String NeedsComputer = course.getComputersNeeded();
            String YearToBeTaken = course.getYearToBeTaken();
            
            //THIS WAS NEVER LOADED INTO THE SECTIONS COURSE OBJ
            System.out.println("Comp " + NeedsComputer);
            System.out.println("Year " + YearToBeTaken);

            ProgressBarIndex = ProgressBarIndex + 1;
            AutoSchedulingProgressBar.setValue(ProgressBarIndex);
            
            JOptionPane.showMessageDialog(null, "Values Recived Starting Rule Loop");
            
            //APPLY SORT RULES
            RefreshLocation_DATAONLY();
            locationSortedList.clear();
            locationSortedList = locationList;
            
            if (NeedsComputer != null)
            {
                JOptionPane.showMessageDialog(null, "No Computers Here");
                Sort_LocationList_LOCATION(NeedsComputer);
            }
            
            
            Sort_LocationList_TIME(YearToBeTaken);
            JOptionPane.showMessageDialog(null, "Sorting LocationList Size: " + locationSortedList.size());
           

            //APPLY LOCATION
            if (locationSortedList.size() > 0)
            {
                while (locationSortedList.size() > counter3)
                {
                    location = locationSortedList.get(counter);
                    boolean[] TimesAvalible = location.getTimesAvalible();
                    SavedCounter = 100;
                    
                    while (TimesAvalible.length > counter2)
                    {
                        if (TimesAvalible[counter2] == false)
                        {
                            SavedCounter = counter2;
                            break;
                        }
                        counter2++;
                    }
                    if (SavedCounter != 100)
                    {
                        break;
                    }
                    counter3++;
                }
                if (SavedCounter != 100)
                {
                    SectionsWithNoCourses++;
                    break;
                }
                
                location = locationSortedList.get(counter);
                
                String CRNID = section.getCRNID();
                String Campus = location.getCampus();
                String RoomNo = location.getRoomNo();

                section.setLocation(location);
                //section.setTimeSlot(time);
                
                String Query = "UPDATE KPUSECTION SET Campus = '" + Campus + "', RoomNo = '" + RoomNo + "'," + " WHERE CRNID = '" + CRNID;
                Data_Update.InsertDatabase(Query);
                
                //Save SQL data?
                //Apply Location/time to section
            }
            else 
            {
                SectionsWithNoCourses++;
            }
       
            counter++;
        }
        System.out.println("I HAVE NO LOACTIONS! " + SectionsWithNoCourses);
    }
    
    ////////////////////////////////////////////////////////////////////////////
    
    private void Sort_SectionList_LOCATION(Main_Semester semester)
    {
        
        RefreshSection_DATAONLY();
        
        Main_Section section;
        
        String Season = semester.getSeason();
        String Year = semester.getsemYear();
        
        String SectionSeason; 
        String SectionYear;
        String Campus;
        
        int counter = 0;
        
        while (sectionList.size() > counter)
        {
            section = sectionList.get(counter);
                        
            Campus = "";
            SectionSeason = section.getSemester().getSeason();
            SectionYear = section.getSemester().getsemYear();
            
            if (section.getLocation().getCampus() != null)
            {
                Campus = section.getLocation().getCampus();
            }

            if (Season.equals(SectionSeason) && Year.equals(SectionYear) && Campus.equals(""))
            {
                sectionSortedList.add(section);
            }
            counter++;
        }
    }
     
    private void Sort_LocationList_LOCATION(String NeedsComputer)
    {
        if (NeedsComputer.equals("1"))
        {
            SortRule_LOCATION_NeedsComputers();
        }     
    }
    
    private void Sort_LocationList_TIME(String YearToBeTaken)
    {      
        if (YearToBeTaken.equals("Year 3") || YearToBeTaken.equals("Year 4"))
        {
            SortRule_LOCATION_TIME_SeniorCoursesAfter4PM();
        }
        
        //SortRule_LOCATION_TIME_SameCourseSameTime()
    }
    
    ////////////////////////////////////////////////////////////////////////////
    
    private void Sort_SectionList_TEACHER(Main_Semester semester)
    {
        
    }
    
    private void Sort_TeacherList()
    {
        
    }
    
    ////////////////////////////////////////////////////////////////////////////
    
    private void SortRule_LOCATION_NeedsComputers()
    {
        //Remove all locations with no computers
        Main_Location location;
        int counter = 0;
        
        while (locationSortedList.size() > counter)
        {
            location = locationSortedList.get(counter);
            
            if (location.getComputersAvalible().equals("0"))
            {
                locationSortedList.remove(location);
            }
            counter++;
        }
    }
    
    private void SortRule_LOCATION_TIME_SeniorCoursesAfter4PM()
    {
         
    }
    
    /*
    private void SortRule_LOCATION_TIME_SameCourseSameTime()
    {
        //search all of
    }
    */
    
    ////////////////////////////////////////////////////////////////////////////
    
    private void SortRule_TEACHER_Filled()
    {
        
    }
    
    private void SortRule_TEACHER_MaxFourSections()
    {
        
    }
    
    private void SortRule_TEACHER_MaxThreeSections()
    {
        
    }
    
    private void SortRule_TEACHER_MaxTwoSectionsADay()
    {
        
    }
    
    ////////////////////////////////////////////////////////////////////////////

    private void RefreshScheduleComboBoxes()
    {
        RefreshTeacher_DATAONLY();
        RefreshSemester_DATAONLY();
        
        DefaultComboBoxModel ScheduleTeacherCBModel = new DefaultComboBoxModel();
        DefaultComboBoxModel ScheduleSemesterCBModel = new DefaultComboBoxModel();

        int counter = 0;
        while (teacherList.size() > counter)
        {
            Main_Teacher teacher = teacherList.get(counter);
            
            ScheduleTeacherCBModel.addElement(teacher.FirstName + " " + teacher.getLastName());
            counter++;
        }
        
        counter = 0;
        while (semesterList.size() > counter)
        {
            Main_Semester semester = semesterList.get(counter);
            
            ScheduleSemesterCBModel.addElement(semester.getSeason() + " " + semester.getsemYear());
            counter++;
        }
        
        ScheduleTeacherComboB.setModel(ScheduleTeacherCBModel);
        ScheduleSemesterComboB.setModel(ScheduleSemesterCBModel);
    }
    
    private void RefreshScheduleSections()
    {
        RefreshSection_DATAONLY();
        RefreshTeacher_DATAONLY();
        RefreshSemester_DATAONLY();
        
        DefaultTableModel ScheduleTeacherSectionsTableModel = (DefaultTableModel) ScheduleTeacherSectionsTable.getModel();
        ScheduleTeacherSectionsTableModel.setRowCount(0);
        
        int TeacherIndex = ScheduleTeacherComboB.getSelectedIndex();
        int SemesterIndex = ScheduleSemesterComboB.getSelectedIndex();
        
        Main_Teacher teacher = teacherList.get(TeacherIndex);
        Main_Semester semester = semesterList.get(SemesterIndex);
        Main_Course course;
        
        //get all of the teachers Semester / taught course
        int counter = 0;
        
        while (sectionList.size() > counter)
        {
            Main_Section section = sectionList.get(counter);
            Main_Location location;
            
            String SectionID;
            String CRNID;
            String CourseID;
            String Time;
            String Day;
            String Campus = "";
            String RoomNo = "";

            boolean TeacherCheck = false;
            boolean SemesterCheck1 = section.getSemester().getSeason().equals(semester.getSeason());
            boolean SmesterCheck2 = section.getSemester().getsemYear().equals(semester.getsemYear());
            
            if (section.getTeacher().getKPUID() != null)
            {
                TeacherCheck = section.getTeacher().getKPUID().contains(teacher.getKPUID());
            }
      
            if (TeacherCheck && SemesterCheck1 && SmesterCheck2)
            {    
                CRNID = section.getCRNID();
                SectionID = section.getSectionID();
                CourseID = section.getCourse().getCourseID();
                Time = section.getTime();
                Day = section.getDay();
              
                if (section.getLocation() != null)
                {
                    Campus = section.getLocation().getCampus();
                    RoomNo = section.getLocation().getRoomNo();
                }
           
                Object[] row = { CRNID, SectionID, CourseID,(Campus + " " + RoomNo), (Day + " " + Time) };
                ScheduleTeacherSectionsTableModel.addRow(row);
            }
            counter++;
        }
    }
    
    private void RefreshScheduleTable()
    {
        int TeacherIndex = ScheduleTeacherComboB.getSelectedIndex();
        int SemesterIndex = ScheduleSemesterComboB.getSelectedIndex();
        
        Main_Teacher teacher = teacherList.get(TeacherIndex);
        Main_Semester semester = semesterList.get(SemesterIndex);
        
        DefaultTableModel SchedulueTableModel = (DefaultTableModel) SchedulueTable.getModel();
        SchedulueTableModel.setRowCount(0);
        
        String[] DataBlocks = new String[30];
        int counter = 0;
        int NoTimeCounter = 0;
        
        while (ScheduleTeacherSectionsTable.getRowCount() > counter)
        {
            //Grab values
            String CRNID = ScheduleTeacherSectionsTable.getModel().getValueAt(counter, 0).toString();
            String SectionID = ScheduleTeacherSectionsTable.getModel().getValueAt(counter, 1).toString();
            String CourseID = ScheduleTeacherSectionsTable.getModel().getValueAt(counter, 2).toString();
            String Location = ScheduleTeacherSectionsTable.getModel().getValueAt(counter, 3).toString();
            String Time = ScheduleTeacherSectionsTable.getModel().getValueAt(counter, 4).toString();
    
            if (Time.equals("null null"))
            {
                if (NoTimeCounter == 0)
                {
                    DataBlocks[5] = CourseID + " " + SectionID + " " + Location;
                    NoTimeCounter++;
                }
                else if (NoTimeCounter == 1)
                {
                    DataBlocks[11] = CourseID + " " + SectionID + " " + Location;
                    NoTimeCounter++;
                }
                else if (NoTimeCounter == 2)
                {
                    DataBlocks[17] = CourseID + " " + SectionID + " " + Location;
                    NoTimeCounter++;
                }
                else if (NoTimeCounter == 3)
                {
                    DataBlocks[23] = CourseID + " " + SectionID + " " + Location;
                    NoTimeCounter++;
                }
                else if (NoTimeCounter == 4)
                {
                    DataBlocks[29] = CourseID + " " + SectionID + " " + Location;
                    NoTimeCounter++;
                } 
            }
            else
            {
                switch (Time)
                {
                    case "Monday 7am - 9:50am":  DataBlocks[0] = CourseID + " " + SectionID + " " + Location;
                        break;
                    case "Monday 10am - 12:50pm":  DataBlocks[6] = CourseID + " " + SectionID + " " + Location;
                        break; 
                    case "Monday 1pm - 3:50pm":  DataBlocks[12] = CourseID + " " + SectionID + " " + Location;
                        break;    
                    case "Monday 4pm - 6:50pm":  DataBlocks[18] = CourseID + " " + SectionID + " " + Location;
                        break;    
                    case "Monday 7pm - 9:50pm":  DataBlocks[24] = CourseID + " " + SectionID + " " + Location;
                        break;   
                        
                    case "Tuesday 7am - 9:50am":  DataBlocks[1] = CourseID + " " + SectionID + " " + Location;
                        break;
                    case "Tuesday 10am - 12:50pm":  DataBlocks[7] = CourseID + " " + SectionID + " " + Location;
                        break; 
                    case "Tuesday 1pm - 3:50pm":  DataBlocks[13] = CourseID + " " + SectionID + " " + Location;
                        break;    
                    case "Tuesday 4pm - 6:50pm":  DataBlocks[19] = CourseID + " " + SectionID + " " + Location;
                        break;    
                    case "Tuesday 7pm - 9:50pm":  DataBlocks[25] = CourseID + " " + SectionID + " " + Location;
                        break;     
                        
                    case "Wednesday 7am - 9:50am":  DataBlocks[2] = CourseID + " " + SectionID + " " + Location;
                        break;
                    case "Wednesday 10am - 12:50pm":  DataBlocks[8] = CourseID + " " + SectionID + " " + Location;
                        break; 
                    case "Wednesday 1pm - 3:50pm":  DataBlocks[14] = CourseID + " " + SectionID + " " + Location;
                        break;    
                    case "Wednesday 4pm - 6:50pm":  DataBlocks[20] = CourseID + " " + SectionID + " " + Location;
                        break;    
                    case "Wednesday 7pm - 9:50pm":  DataBlocks[26] = CourseID + " " + SectionID + " " + Location;
                        break;  
                        
                    case "Thursday 7am - 9:50am":  DataBlocks[3] = CourseID + " " + SectionID + " " + Location;
                        break;
                    case "Thursday 10am - 12:50pm":  DataBlocks[9] = CourseID + " " + SectionID + " " + Location;
                        break; 
                    case "Thursday 1pm - 3:50pm":  DataBlocks[15] = CourseID + " " + SectionID + " " + Location;
                        break;    
                    case "Thursday 4pm - 6:50pm":  DataBlocks[21] = CourseID + " " + SectionID + " " + Location;
                        break;    
                    case "Thursday 7pm - 9:50pm":  DataBlocks[27] = CourseID + " " + SectionID + " " + Location;
                        break;     
                        
                    case "Friday 7am - 9:50am":  DataBlocks[4] = CourseID + " " + SectionID + " " + Location;
                        break;
                    case "Friday 10am - 12:50pm":  DataBlocks[10] = CourseID + " " + SectionID + " " + Location;
                        break; 
                    case "Friday 1pm - 3:50pm":  DataBlocks[16] = CourseID + " " + SectionID + " " + Location;
                        break;    
                    case "Friday 4pm - 6:50pm":  DataBlocks[22] = CourseID + " " + SectionID + " " + Location;
                        break;    
                    case "Friday 7pm - 9:50pm":  DataBlocks[28] = CourseID + " " + SectionID + " " + Location;
                        break;     
                }
            }   
            counter ++;
        }
        
        String[] TableRow1 = {"7am - 9:50am", DataBlocks[0], DataBlocks[1], DataBlocks[2], DataBlocks[3], DataBlocks[4], DataBlocks[5]};
        String[] TableRow2 = {"10am - 12:50pm", DataBlocks[6], DataBlocks[7], DataBlocks[8], DataBlocks[9], DataBlocks[10], DataBlocks[11]};
        String[] TableRow3 = {"1pm - 3:50pm", DataBlocks[12], DataBlocks[13], DataBlocks[14], DataBlocks[15], DataBlocks[16], DataBlocks[17]};
        String[] TableRow4 = {"4pm - 6:50pm", DataBlocks[18], DataBlocks[19], DataBlocks[20], DataBlocks[21], DataBlocks[22], DataBlocks[23]};
        String[] TableRow5 = {"7pm - 9:50pm", DataBlocks[24], DataBlocks[25], DataBlocks[26], DataBlocks[27], DataBlocks[28], DataBlocks[29]};

        SchedulueTableModel.addRow(TableRow1);
        SchedulueTableModel.addRow(TableRow2);
        SchedulueTableModel.addRow(TableRow3);
        SchedulueTableModel.addRow(TableRow4);
        SchedulueTableModel.addRow(TableRow5);
        
        //Grab CRN ID?
        //Search CRNID?
        
        //Needs the location
        //Needs COurse ID
        //COurse Name?
        
        //Add to Table?
    }
    
    ////////////////////////////////////////////////////////////////////////////
    
    private void TeacherCourse_ADD()
    {
        if (CoursesAvalibleTable.getSelectionModel().isSelectionEmpty() == true)
        {
            ErrorNoTableRow();
        }
        
        int rowIndex = CoursesAvalibleTable.getSelectedRow();
        String CourseID = CoursesAvalibleTable.getModel().getValueAt(rowIndex, 0).toString();
        
        DefaultTableModel TeachableCoursesTableModel = (DefaultTableModel) TeachableCoursesTable.getModel();
        
        Object[] row = { CourseID };
        TeachableCoursesTableModel.addRow(row);
    }
    
    private void TeacherCourse_REMOVE()
    {
        if (TeachableCoursesTable.getSelectionModel().isSelectionEmpty() == true)
        {
            ErrorNoTableRow();
        }
        else
        {
            DefaultTableModel TeachableCoursesTableModel = (DefaultTableModel) TeachableCoursesTable.getModel();
            int CourseRow = TeachableCoursesTable.getSelectedRow();

            TeachableCoursesTableModel.removeRow(CourseRow);
        }
    }

    private void TeacherCourse_EDIT_ADD()
    {
         if (EditCoursesAvalibleTable.getSelectionModel().isSelectionEmpty() == true)
        {
            ErrorNoTableRow();
        }
        
        int rowIndex = EditCoursesAvalibleTable.getSelectedRow();
        String CourseID = EditCoursesAvalibleTable.getModel().getValueAt(rowIndex, 0).toString();
        
        DefaultTableModel EditTeachableCoursesTableModel = (DefaultTableModel) EditTeachableCoursesTable.getModel();
        
        Object[] row = { CourseID };
        EditTeachableCoursesTableModel.addRow(row);
    }
    
    private void TeacherCourse_EDIT_REMOVE()
    {
        if (EditTeachableCoursesTable.getSelectionModel().isSelectionEmpty() == true)
        {
            ErrorNoTableRow();
        }
        else
        {
            DefaultTableModel EditTeachableCoursesTableModel = (DefaultTableModel) EditTeachableCoursesTable.getModel();
            int CourseRow = EditTeachableCoursesTable.getSelectedRow();

            EditTeachableCoursesTableModel.removeRow(CourseRow);
        }
    }
    
    ////////////////////////////////////////////////////////////////////////////
    
    private void AddEditedSection()
    {
        String CRNID = EditCRNIDTF.getText();
        String SectionID = EditSectionIDTF.getText();        
        String CourseID = EditCourseComboB.getSelectedItem().toString();
        String RoomNo = EditLocationComboB.getSelectedItem().toString();
        String KPUID = EditTeacherComboB.getSelectedItem().toString();
        String Season = EditSemesterComboB.getSelectedItem().toString();
        String TimeSlot = EditSectionTimeComboB.getSelectedItem().toString();        
        boolean noTeacher = EditSectionTeacherCheckB.isSelected();
        boolean noLocation = EditSectionLoactionCheckB.isSelected();
        boolean noTimeSlot = EditSectionTimeCheckB.isSelected();

        int FilterCheck = 1;        
        if(noTeacher == true)
        {
             KPUID = "";
        }
        if(noLocation == true)
        {
            RoomNo = "";
        }
        if(noTimeSlot == true)
        {
            TimeSlot = "";
        }        
        if(CRNID.equals(""))
        {
            FilterCheck = 0;
            ErrorEmptyTF();
        }
        if(SectionID.equals(""))
        {
            FilterCheck = 0;
            ErrorEmptyTF();
        }
        if(EditCourseComboB.getSelectedItem().equals("<Refresh Data>") || EditLocationComboB.getSelectedItem().equals("<Refresh Data>") || EditTeacherComboB.getSelectedItem().equals("<Refresh Data>") || EditSemesterComboB.getSelectedItem().equals("<Refresh Data>"))
        {          
            FilterCheck = 0;
            ErrorNoData();
        }        
        if (FilterCheck == 1)
        {
            RemoveSection();
            String Query = "INSERT INTO KPUSection(CRNID, SectionID, CourseID, RoomNo, KPUID, Season, TimeSlot) VALUES('" + CRNID + "','" + SectionID + "','" + CourseID + "','" + RoomNo + "','" + KPUID + "','" + Season + "','" + TimeSlot + ")";
            Data_Update.InsertDatabase(Query);
        }
    } 
    
    public void AddEditedCourse()
    {
        String courseID = EditCourseIDTF.getText();
        String courseName = EditCourseNameTF.getText();
        String yearToBeTaken = EditCourseYearComboB.getSelectedItem().toString();
        String program = EditProgramComboB.getSelectedItem().toString();
        boolean computersNeeded = EditComputersNeededCheckB.isSelected();
        int computersNeededINT;

        //Set a yes or no value for the computers needed
        if(computersNeeded == true)
        {
            computersNeededINT = 1;
        }
        else
        {
            computersNeededINT = 0;
        }

        int FilterCheck = 1;

        if (courseID.equals("") || courseName.equals(""))
        {
            ErrorEmptyTF();
            FilterCheck = 0;
        }

        if (FilterCheck == 1)
        {
            RemoveCourse();
            String Query = "INSERT INTO Course(CourseID, CourseName, YearToBeTaken, Program, ComputersNeeded) VALUES('" + courseID + "','" + courseName + "','" + yearToBeTaken + "','" + program + "','" + computersNeededINT +"')";
            Data_Update.InsertDatabase(Query);
        }
    }
    
    public void AddEditedTeacher()
    {
        String KPUID = EditKPUIDTF.getText();
        String firstName = EditFirstNameTF.getText();
        String lastName= EditLastNameTF.getText();

        int FilterCheck = 1;

        if (KPUID.equals("") || firstName.equals("") || lastName.equals(""))
        {
            ErrorEmptyTF();
            FilterCheck = 0;
        }

        if (FilterCheck == 1)
        {
            RemoveTeacher();
            String Query = "INSERT INTO Teacher(KPUID, FirstName, LastName) VALUES('" + KPUID + "','" + firstName + "','" + lastName +"')";
            Data_Update.InsertDatabase(Query);
        }
   } 
    
    private void AddEditedSemester() 
    {
        String SemYear = EditYearTF.getText();
        String Season = EditSeasonComboB.getSelectedItem().toString();
        
        int year = Integer.parseInt(SemYear);
        int FilterCheck = 1;

        if (year < 0 || year > 9999)
        {
            ErrorInvalidEntry();
            FilterCheck = 0;
        }
        
        if ("".equals(SemYear))
        {
            ErrorEmptyTF();
            FilterCheck = 0;
        }
        
        if (FilterCheck == 1)
        {
            RemoveSemester();
            String Query = "INSERT INTO Semester(SemYear, Season) VALUES('" + SemYear + "','" + Season + "')";
            Data_Update.InsertDatabase(Query);
        }    
    }

    private void AddEditedLocation()
    {
           String Campus = EditCampusComboB.getSelectedItem().toString();
           String RoomNo = EditRoomNumberTF.getText();
           boolean ComputersAvailable = EditComputersAvalibleCheckB.isSelected();
           int computersAvailableINT;

          //Set a yes or no value for the computers needed
          if(ComputersAvailable == true)
          {
              computersAvailableINT = 1;
          }
          else
          {
              computersAvailableINT = 0;
          }

          int FilterCheck = 1;

          if("".equals(Campus) || "".equals(RoomNo))
          {
              ErrorEmptyTF();
              FilterCheck = 0;
          }
          if (FilterCheck == 1)
          {
              RemoveLocation();
              String Query = "INSERT INTO Location(Campus, RoomNo, ComputersAvalible) VALUES('" + Campus + "','" + RoomNo +"','" + computersAvailableINT +"')";
              Data_Update.InsertDatabase(Query);
          }
       }

    ////////////////////////////////////////////////////////////////////////////
    
    private void AddSection_OLD() 
    {
        String CRNID = CRNIDTF.getText();
        String SectionID = SectionIDTF.getText();

        String CourseID = CourseComboB.getSelectedItem().toString();
        String RoomNo = LocationComboB.getSelectedItem().toString();
        String KPUID = TeacherComboB.getSelectedItem().toString();
        String Season = SemesterComboB.getSelectedItem().toString();
        String TimeSlot = SectionTimeComboB.getSelectedItem().toString();

        boolean noTeacher = jCheckBox2.isSelected();
        boolean noLocation = jCheckBox1.isSelected();
        boolean noTimeSlot = jCheckBox4.isSelected();
        
        int FilterCheck = 1;

        if(noTeacher == true)
        {
             KPUID = "";
        }
        if(noLocation == true)
        {
            RoomNo = "";
        }
        if(noTimeSlot == true)
        {
            TimeSlot = "";
        }

        if(CRNID.equals("") || SectionID.equals("")) 
        {
            FilterCheck = 0;
            ErrorEmptyTF();
        }
        
        if(CourseComboB.getSelectedItem().equals("<Refresh Data>") || LocationComboB.getSelectedItem().equals("<Refresh Data>") || TeacherComboB.getSelectedItem().equals("<Refresh Data>") || SemesterComboB.getSelectedItem().equals("<Refresh Data>"))
        {           
            FilterCheck = 0;
            ErrorNoData();
        }

        if (FilterCheck == 1)
        {
            String Query = "INSERT INTO KPUSection(CRNID, SectionID, CourseID, RoomNo, KPUID, Season, TimeSlot) VALUES('" + CRNID + "','" + SectionID + "','" + CourseID + "','" + RoomNo + "','" + KPUID + "','" + Season + "','" + TimeSlot + "')";
            Data_Update.InsertDatabase(Query);
        }
    }
    
    private void AddSection()
   {
       String CRNID = CRNIDTF.getText();
       String SectionID = SectionIDTF.getText();

       String CourseID = CourseComboB.getSelectedItem().toString();
       String Location = LocationComboB.getSelectedItem().toString();
       String KPUID = TeacherComboB.getSelectedItem().toString();
       String Semester = SemesterComboB.getSelectedItem().toString();
       String TimeSlot = SectionTimeComboB.getSelectedItem().toString();
       int Semester1 = SemesterComboB.getSelectedIndex();
       int Location1 = LocationComboB.getSelectedIndex();
       
       RefreshLocation_DATAONLY();
       RefreshSemester_DATAONLY();
       
       Main_Teacher TEACHER;
       Main_Semester SEMESTER = semesterList.get(Semester1);
       Main_Location LOCATION = locationList.get(Location1);
       

       boolean noTeacher = jCheckBox2.isSelected();
       boolean noLocation = jCheckBox1.isSelected();
       boolean noTimeSlot = jCheckBox4.isSelected();
       
     
       
       //System.out.println(semyear + " " + season);
       
       //System.out.println(Semester);
       
       int FilterCheck = 1;

       if(noTeacher == true)
       {
            KPUID = "NULL";
       }
       if(noLocation == true)
       {
           Location = "";
       }
       if(noTimeSlot == true)
       {
           TimeSlot = "";
       }

       if(CRNID.equals("") || SectionID.equals(""))
       {
           FilterCheck = 0;
           ErrorEmptyTF();
       }
       
       if(CourseComboB.getSelectedItem().equals("<Refresh Data>") || LocationComboB.getSelectedItem().equals("<Refresh Data>") || TeacherComboB.getSelectedItem().equals("<Refresh Data>") || SemesterComboB.getSelectedItem().equals("<Refresh Data>"))
       {          
           FilterCheck = 0;
           ErrorNoData();
       }

       if (FilterCheck == 1)
       {
               String semyear = SEMESTER.getsemYear();
               String season = SEMESTER.getSeason();
               String roomNo = LOCATION.getRoomNo();
               String Campus = LOCATION.getCampus();
               //String semyear = Semester.substring(0,4);
               //String season = Semester.substring(5,Semester.length());
               //String roomNo = Location.substring(Location.length() - 4, Location.length());
               //String roomNo = Location.substring(0, Location.length());
               //String campus =
               
               //String Campus = Location.substring(0,Location.length() - 5);
           String Query = "INSERT INTO KPUSection(CRNID, SectionID, CourseID, Campus, RoomNo, SemYear, Season) VALUES('" + CRNID + "','" + SectionID + "','" + CourseID + "','" + Campus + "','" + roomNo + "','" + semyear + "','" + season + "')";
           Data_Update.InsertDatabase(Query);
           //String Query2 = "INSERT INTO Semester(SemYear, Season) VALUES ('" + semyear + "','" + season +"')";
           //Data_Update.InsertDatabase(Query2);
           System.out.println(semyear + " " + season);
       }
   }
    
    public void AddCourse()
    {
       String courseID = CourseIDTF.getText();
       String courseName = CourseNameTF.getText(); 
       String yearToBeTaken = CourseYearComboB.getSelectedItem().toString();
       String program = ProgramComboB.getSelectedItem().toString();
       boolean computersNeeded = ComputersNeededCheckB.isSelected();
       int computersNeededINT;
       
       //Set a yes or no value for the computers needed
       if(computersNeeded == true)
       {
           computersNeededINT = 1;
       }
       else
       {
           computersNeededINT = 0;
       }
       
       int FilterCheck = 1;
       
       if (courseID.equals("") || courseName.equals(""))
       {
           ErrorEmptyTF();
           FilterCheck = 0;
       }
       
       if (FilterCheck == 1)
       {
           String Query = "INSERT INTO Course(CourseID, CourseName, YearToBeTaken, Program, ComputersNeeded) VALUES('" + courseID + "','" + courseName + "','" + yearToBeTaken + "','" + program + "','" + computersNeededINT +"')";
           Data_Update.InsertDatabase(Query);
       }
    }
    
    public void AddTeacher()
    {
        String KPUID = KPUIDTF.getText();
        String firstName = FirstNameTF.getText();
        String lastName= LastNameTF.getText();

        int counter = 0;
        int FilterCheck = 1;

        if (KPUID.equals("") || firstName.equals("") || lastName.equals(""))
        {
            ErrorEmptyTF();
            FilterCheck = 0;
        }

        if (FilterCheck == 1)
        {
            String Query = "INSERT INTO Teacher(KPUID, FirstName, LastName) VALUES('" + KPUID + "','" + firstName + "','" + lastName +"')";
            Data_Update.InsertDatabase(Query);
            
            while (TeachableCoursesTable.getRowCount() > counter)
            {
                String CourseID = TeachableCoursesTable.getModel().getValueAt(counter, 0).toString();

                String Query2 = "INSERT INTO TeacherAvalibleCourses(KPUID, TeachableCoursesID) VALUES('" + KPUID + "','" + CourseID + "')";
                Data_Update.InsertDatabase(Query2);

                counter++;
            }
        }    

    
        /*
        //grab current arraylist for the teacher
        Main_Teacher teacher;

        int TeacherRowIndex = TeacherTable.getSelectedRow();
        teacher = teacherList.get(TeacherRowIndex);
        ArrayList<String> temp = teacher.getTeachableCourses();
        ArrayList<Main_Course> TeacherCoursesToBeAdded;
        teacher.setTeachableCourses(temp);
        */
    }
    
    private void AddLocation()
    {
        String Campus = CampusComboB.getSelectedItem().toString();
        String RoomNum = RoomNumberTF.getText();
        boolean ComputersAvalible = ComputersAvalibleCheckB.isSelected();
        int ComputersAvalibleINT;
                
        if (ComputersAvalible == true)
        {
            ComputersAvalibleINT = 1;
        }
        else
        {
            ComputersAvalibleINT = 0;
        }
        
        int FilterCheck = 1;
        
        if (RoomNum.equals(""))
        {
            ErrorEmptyTF();
            FilterCheck = 0;
        }
        
        if (FilterCheck == 1)
        {
            String Query = "INSERT INTO Location(Campus, RoomNo, ComputersAvalible) VALUES('" + Campus + "','" + RoomNum + "','" + ComputersAvalibleINT + "')";
            Data_Update.InsertDatabase(Query);
        }
    }
    
    private void AddSemester()
    {
        String Year = YearTF.getText();
        String Season = SeasonComboB.getSelectedItem().toString();
        
        int FilterCheck = 1;
        
        if (Year.equals(""))
        {
            ErrorEmptyTF();
            FilterCheck = 0;
        }
        
        if (FilterCheck == 1)
        {
            String Query = "INSERT INTO Semester(SemYear, Season) VALUES('" + Year + "','" + Season + "')";
            Data_Update.InsertDatabase(Query);
        }
    }
    
    ////////////////////////////////////////////////////////////////////////////
 
    private void RemoveSection()
    {
        if (SectionTable.getSelectionModel().isSelectionEmpty() == true)
        {
            ErrorNoTableRow();
        }
        else
        {
            int SectionRow = SectionTable.getSelectedRow();

            String CRNID = SectionTable.getModel().getValueAt(SectionRow, 0).toString();

            String Query = "DELETE FROM KPUSection WHERE CRNID ='" + CRNID + "'";
            Data_Update.InsertDatabase(Query);
        }
    }
    
    private void RemoveCourse()
    {
        if (CourseTable.getSelectionModel().isSelectionEmpty() == true)
        {
            ErrorNoTableRow();
        }
        else
        {
            int CourseRow = CourseTable.getSelectedRow();

            String courseID = CourseTable.getModel().getValueAt(CourseRow, 0).toString();

            String Query = "DELETE FROM Course WHERE CourseID ='" + courseID + "'";
            Data_Update.InsertDatabase(Query);
        }
   }
    
    private void RemoveSemester()
    {
        if (SemesterTable.getSelectionModel().isSelectionEmpty() == true)
        {
            ErrorNoTableRow();
        }
        else
        {
            int SemesterRow = SemesterTable.getSelectedRow();
            
            String Year = SemesterTable.getModel().getValueAt(SemesterRow, 0).toString();
            String Season = SemesterTable.getModel().getValueAt(SemesterRow, 1).toString();
            
            String Query =  "DELETE FROM Semester WHERE SemYear = '" + Year + "' AND Season = '" + Season + "'";
            Data_Update.InsertDatabase(Query);
        }   
    }
    
    private void RemoveTeacher()
    {
       if (TeacherTable.getSelectionModel().isSelectionEmpty() == true)
       {
           ErrorNoTableRow();
       }
       else
       {
           int TeacherRow = TeacherTable.getSelectedRow();
           
           String KPUID = TeacherTable.getModel().getValueAt(TeacherRow, 0).toString();
           
           String Query =  "DELETE FROM Teacher WHERE KPUID = '" + KPUID + "'";
           Data_Update.InsertDatabase(Query);
       }
   }
     
    private void RemoveLocation()
   {
       if (LocationTable.getSelectionModel().isSelectionEmpty() == true)
       {
            ErrorNoTableRow();
       }
       else
       {
           int LocationRow = LocationTable.getSelectedRow();
           
           String Campus = LocationTable.getModel().getValueAt(LocationRow, 0).toString();
           String RoomNum = LocationTable.getModel().getValueAt(LocationRow, 1).toString();
           
           String Query = "DELETE FROM Location WHERE Campus = '" + Campus + "' AND RoomNo = '" + RoomNum + "'";
           Data_Update.InsertDatabase(Query);
       }
   }
    
    ////////////////////////////////////////////////////////////////////////////
    
    private void RefreshSchedule()
    {
        AutoSchedulingProgressBar.setStringPainted(true);
        AutoSchedulingProgressBar.setMinimum(0);
        AutoSchedulingProgressBar.setMaximum(100);
        AutoSchedulingProgressBar.setValue(50);
        
        RefreshScheduleComboBoxes();
        RefreshScheduleSections();
        RefreshScheduleTable();
    }
    
    private void RefreshSection()
    {
        DefaultTableModel SectionTableModel = (DefaultTableModel) SectionTable.getModel();
 
        SectionTableModel.setRowCount(0);
        sectionList.clear();
        
        Main_Section section;
        Main_Course course;
        Main_Location location;
        Main_Semester semester;
        Main_Teacher teacher;
        Main_Time timeSlot;
        
        int counter = 0;
                  
        try
        {
            String Query = "SELECT * FROM KPUSection";
            ResultSet result = Data_Update.ConncetToDatabase(Query);
            
            while (result.next()) 
            {
                //Create objects
                section = new Main_Section();
                course = new Main_Course();
                location = new Main_Location();
                semester = new Main_Semester();
                teacher = new Main_Teacher();
                timeSlot = new Main_Time();
                        
                //Add data to object
                section.setCRNID(result.getString(1));
                section.setSectionID(result.getString(2));
                
                course.setCourseID(result.getString(3));
                section.setCourse(course);  
                
                location.setCampus(result.getString(4)); 
                location.setRoomNo(result.getString(5));
                section.setLocation(location);
                
                semester.setsemYear(result.getString(6));
                semester.setSeason(result.getString(7));
                section.setSemester(semester);

                teacher.setKPUID(result.getString(8));
                section.setTeacher(teacher);
                
                section.setDay(result.getString(9));
                section.setTime(result.getString(10));
                
                //Add object to List
                sectionList.add(section);
            }
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        
        
        while (sectionList.size() > counter) 
        {      
            //Set the List to each Course Object in while loop
            section = sectionList.get(counter);
            
            String CRNID = section.getCRNID();
            String SectionID = section.getSectionID();
            
            course = section.getCourse();
            String CourseID = course.getCourseID();
            
            location = section.getLocation(); 
            String Campus = location.getCampus();
            String RoomNo = location.getRoomNo();
            
            semester = section.getSemester();
            String SemYear = semester.getsemYear();
            String Season = semester.getSeason();
            
            teacher = section.getTeacher();
            String KPUID = teacher.getKPUID();
    
            String Day = section.getDay();
            String Time = section.getTime();
           
            Object[] row = { CRNID, SectionID, CourseID, (SemYear + " " + Season), (Campus + " " + RoomNo), (Day + " " + Time), KPUID };
            SectionTableModel.addRow(row);

            counter++;
        }
    }
    
    public void RefreshCourse()
    {
        DefaultTableModel CourseTableModel = (DefaultTableModel) CourseTable.getModel();
 
        CourseTableModel.setRowCount(0);
        courseList.clear();
        
        Main_Course course;
        int counter = 0;
                  
        try
        {
            String Query = "SELECT * FROM Course";
            ResultSet result = Data_Update.ConncetToDatabase(Query);
            
            while (result.next()) 
            {
                //Create object
                course = new Main_Course();

                //Add data to object
                course.setCourseID(result.getString(1));
                course.setCourseName(result.getString(2));
                course.setYearToBeTaken(result.getString(3));
                course.setProgram(result.getString(4));
                course.setComputersNeeded(result.getString(5));

                //Add object to List
                courseList.add(course);
            }
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        
        
        while (courseList.size() > counter) 
        {      
            //Set the List to each Course Object in while loop
            course = courseList.get(counter);
            
            String CourseID = course.getCourseID();
            String CourseName = course.getCourseName();
            String YearToBeTaken = course.getYearToBeTaken();
            String Program = course.getProgram();
            String ComputersNeeded = course.getComputersNeeded();
            
            Object[] row = { CourseID, CourseName, YearToBeTaken, Program, ComputersNeeded };
            CourseTableModel.addRow(row);

            counter++;
        }
    }
    
    private void RefreshTeacher()
    {
        DefaultTableModel TeacherTableModel = (DefaultTableModel) TeacherTable.getModel();
        
        TeacherTableModel.setRowCount(0);
        teacherList.clear();
 
        Main_Teacher teacher;
        
        int counter = 0;
                  
        try
        {
            String Query = "SELECT * FROM Teacher";
            ResultSet result = Data_Update.ConncetToDatabase(Query);
            
            while (result.next()) 
            {
                //Create object
                teacher = new Main_Teacher();

                //Add data to object
                teacher.setKPUID(result.getString(1));
                teacher.setFirstName(result.getString(2));
                teacher.setLastName(result.getString(3));

                //Add object to List
                teacherList.add(teacher);
            }
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        
        while (teacherList.size() > counter) 
        {      
            //Set the List to each Course Object in while loop
            teacher = teacherList.get(counter);
            
            String KPUID = teacher.getKPUID();
            String FirstName = teacher.getFirstName();
            String LastName = teacher.getLastName();
            
            Object[] row = { KPUID, FirstName, LastName };
            TeacherTableModel.addRow(row);

            counter++;
        }
        
        try
        {
            String Query = "SELECT * FROM TeacherAvalibleCourses";
            ResultSet result = Data_Update.ConncetToDatabase(Query);
            
            while (result.next()) 
            {
                counter = 0;
                String TeacherID = result.getString(1);
                String CourseID = result.getString(2);

                while (teacherList.size() > counter)
                {
                    teacher = teacherList.get(counter);
                    
                    if (teacher.getKPUID().contains(TeacherID))
                    {                   
                        teacher.TeachableCourses.add(CourseID);
                    }
                    counter++;
                }
            }
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e);
        }    
    }
    
    private void RefreshSemester()
    {
        DefaultTableModel SemesterTableModel = (DefaultTableModel) SemesterTable.getModel();
 
        SemesterTableModel.setRowCount(0);
        semesterList.clear();
        
        Main_Semester semester;
        int counter = 0;
                  
        try
        {
            String Query = "SELECT * FROM Semester";
            ResultSet result = Data_Update.ConncetToDatabase(Query);
            
            while (result.next()) 
            {
                //Create object
                semester = new Main_Semester();

                //Add data to object
                semester.setsemYear(result.getString(1));
                semester.setSeason(result.getString(2));

                //Add object to List
                semesterList.add(semester);
            }
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        
        
        
        while (semesterList.size() > counter) 
        {      
            //Set the List to each Course Object in while loop
            semester = semesterList.get(counter);
            
            String semYear = semester.getsemYear();
            String Season = semester.getSeason();
            
            Object[] row = { semYear, Season };
            SemesterTableModel.addRow(row);

            counter++;
        }
    }

    private void RefreshLocation()
    {
        DefaultTableModel LocationTableModel = (DefaultTableModel) LocationTable.getModel();
 
        LocationTableModel.setRowCount(0);
        locationList.clear();
        
        Main_Location location;
        int counter = 0;
                  
        try
        {
            String Query = "SELECT * FROM Location";
            ResultSet result = Data_Update.ConncetToDatabase(Query);
            
            while (result.next()) 
            {
                //Create object
                location = new Main_Location();

                //Add data to object
                location.setCampus(result.getString(1));
                location.setRoomNo(result.getString(2));
                location.setComputersAvalible(result.getString(3));

                //Add object to List
                locationList.add(location);
            }
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        
        
        while (locationList.size() > counter) 
        {      
            //Set the List to each Course Object in while loop
            location = locationList.get(counter);
            
            String Campus = location.getCampus();
            String RoomNo = location.getRoomNo();
            String ComputersAvalible = location.getComputersAvalible();
            
            Object[] row = { Campus, RoomNo, ComputersAvalible };
            LocationTableModel.addRow(row);

            counter++;
        }
    }
    
    ////////////////////////////////////////////////////////////////////////////
    
    private void RefreshSection_DATAONLY()
    {
        sectionList.clear();
        
        Main_Section section;
        Main_Course course;
        Main_Location location;
        Main_Semester semester;
        Main_Teacher teacher;
        Main_Time timeSlot;
                  
       try
        {
            String Query = "SELECT * FROM KPUSection";
            ResultSet result = Data_Update.ConncetToDatabase(Query);
            
            while (result.next()) 
            {
                //Create objects
                section = new Main_Section();
                course = new Main_Course();
                location = new Main_Location();
                semester = new Main_Semester();
                teacher = new Main_Teacher();
                timeSlot = new Main_Time();
                        
                //Add data to object
                section.setCRNID(result.getString(1));
                section.setSectionID(result.getString(2));
                
                course.setCourseID(result.getString(3));
                section.setCourse(course);  
                
                location.setCampus(result.getString(4)); 
                location.setRoomNo(result.getString(5));
                section.setLocation(location);
                
                semester.setsemYear(result.getString(6));
                semester.setSeason(result.getString(7));
                section.setSemester(semester);

                teacher.setKPUID(result.getString(8));
                section.setTeacher(teacher);
                
                section.setDay(result.getString(9));
                section.setTime(result.getString(10));
                
                //Add object to List
                sectionList.add(section);
            }
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }
  
    private void RefreshSection_ADD()
    {
        RefreshCourse_DATAONLY();
        RefreshLocation_DATAONLY();
        RefreshSemester_DATAONLY();
        RefreshTeacher_DATAONLY();
        
        Main_Section section;
        Main_Course course;
        Main_Location location;
        Main_Semester semester;
        Main_Teacher teacher;
        Main_Time timeSlot;
             
        DefaultComboBoxModel CourseComboBModel = new DefaultComboBoxModel();
        DefaultComboBoxModel SemesterComboBModel = new DefaultComboBoxModel();
        DefaultComboBoxModel TeacherComboBModel = new DefaultComboBoxModel();
        DefaultComboBoxModel LocationComboBModel = new DefaultComboBoxModel();
        
        int counter = 0;
        while (courseList.size() > counter) 
        {      
            course = courseList.get(counter);
            String CourseID = course.getCourseID();
            CourseComboBModel.addElement(CourseID);
            
            counter++;
        }
        
        counter = 0;
        while (semesterList.size() > counter) 
        {      
            semester = semesterList.get(counter);
            String Year = semester.getsemYear();
            String Season = semester.getSeason();
            SemesterComboBModel.addElement(Year + " " + Season);
            
            counter++;
        }
        
        counter = 0;
        while (locationList.size() > counter) 
        {      
            location = locationList.get(counter);
            String Campus = location.getCampus();
            String RoomNo = location.getRoomNo();
            LocationComboBModel.addElement(Campus + " " + RoomNo);
            
            counter++;
        }
        
        counter = 0;
        while (teacherList.size() > counter) 
        {      
            teacher = teacherList.get(counter);
            String FirstName = teacher.getFirstName();
            String LastName = teacher.getLastName();
            TeacherComboBModel.addElement(FirstName + " " + LastName);
            
            counter++;
        }
        
        CourseComboB.setModel(CourseComboBModel);
        SemesterComboB.setModel(SemesterComboBModel);
        TeacherComboB.setModel(TeacherComboBModel);
        LocationComboB.setModel(LocationComboBModel);
    }
    
    private void RefreshSection_EDIT_ADD()
    {
        RefreshCourse_DATAONLY();
        RefreshLocation_DATAONLY();
        RefreshSemester_DATAONLY();
        RefreshTeacher_DATAONLY();
        
        Main_Section section;
        Main_Course course;
        Main_Location location;
        Main_Semester semester;
        Main_Teacher teacher;
        Main_Time timeSlot;
             
        DefaultComboBoxModel CourseComboBModel = new DefaultComboBoxModel();
        DefaultComboBoxModel SemesterComboBModel = new DefaultComboBoxModel();
        DefaultComboBoxModel TeacherComboBModel = new DefaultComboBoxModel();
        DefaultComboBoxModel LocationComboBModel = new DefaultComboBoxModel();
        
        int counter = 0;
        while (courseList.size() > counter) 
        {      
            course = courseList.get(counter);
            String CourseID = course.getCourseID();
            CourseComboBModel.addElement(CourseID);
            
            counter++;
        }
        
        counter = 0;
        while (semesterList.size() > counter) 
        {      
            semester = semesterList.get(counter);
            String Year = semester.getsemYear();
            String Season = semester.getSeason();
            SemesterComboBModel.addElement(Year + " " + Season);
            
            counter++;
        }
        
        counter = 0;
        while (locationList.size() > counter) 
        {      
            location = locationList.get(counter);
            String Campus = location.getCampus();
            String RoomNo = location.getRoomNo();
            LocationComboBModel.addElement(Campus + " " + RoomNo);
            
            counter++;
        }
        
        counter = 0;
        while (teacherList.size() > counter) 
        {      
            teacher = teacherList.get(counter);
            String FirstName = teacher.getFirstName();
            String LastName = teacher.getLastName();
            TeacherComboBModel.addElement(FirstName + " " + LastName);
            
            counter++;
        }
        
        EditCourseComboB.setModel(CourseComboBModel);
        EditSemesterComboB.setModel(SemesterComboBModel);
        EditTeacherComboB.setModel(TeacherComboBModel);
        EditLocationComboB.setModel(LocationComboBModel);
    }
    
    public void RefreshCourse_DATAONLY()
    {
        courseList.clear();
        Main_Course course;
                  
        try
        {
            String Query = "SELECT * FROM Course";
            ResultSet result = Data_Update.ConncetToDatabase(Query);
            
            while (result.next()) 
            {
                //Create object
                course = new Main_Course();

                //Add data to object
                course.setCourseID(result.getString(1));
                course.setCourseName(result.getString(2));
                course.setYearToBeTaken(result.getString(3));
                course.setProgram(result.getString(4));
                course.setComputersNeeded(result.getString(5));

                //Add object to List
                courseList.add(course);
            }
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    private void RefreshTeacher_DATAONLY()
    {
        teacherList.clear();
 
        Main_Teacher teacher;

        int counter = 0;
                  
        try
        {
            String Query = "SELECT * FROM Teacher";
            ResultSet result = Data_Update.ConncetToDatabase(Query);
            
            while (result.next()) 
            {
                //Create object
                teacher = new Main_Teacher();

                //Add data to object
                teacher.setKPUID(result.getString(1));
                teacher.setFirstName(result.getString(2));
                teacher.setLastName(result.getString(3));

                //Add object to List
                teacherList.add(teacher);
            }
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        
        try
        {
            String Query = "SELECT * FROM TeacherAvalibleCourses";
            ResultSet result = Data_Update.ConncetToDatabase(Query);
            
            while (result.next()) 
            {
                counter = 0;
                String TeacherID = result.getString(1);
                String CourseID = result.getString(2);

                while (teacherList.size() > counter)
                {
                    teacher = teacherList.get(counter);
                    
                    if (teacher.getKPUID().contains(TeacherID))
                    {                   
                        teacher.TeachableCourses.add(CourseID);
                    }
                    counter++;
                }
            }
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e);
        }    
    }
    
    private void RefreshTeacher_ADD()
    {
        RefreshCourse_DATAONLY();
        
        DefaultTableModel CoursesAvalibleTableModel = (DefaultTableModel) CoursesAvalibleTable.getModel();
        CoursesAvalibleTableModel.setRowCount(0);
        
        Main_Course course;
        
        int counter = 0;
        while (courseList.size() > counter) 
        {      
            course = courseList.get(counter);
            String CourseID = course.getCourseID();
            
            Object[] row = { CourseID };
            CoursesAvalibleTableModel.addRow(row);

            counter++;
        }
    }
    
    private void RefreshTeacher_EDIT_ADD()
    {
        RefreshCourse_DATAONLY();
        
        DefaultTableModel EditCoursesAvalibleTableModel = (DefaultTableModel) EditCoursesAvalibleTable.getModel();
        EditCoursesAvalibleTableModel.setRowCount(0);
        
        Main_Course course;
        
        int counter = 0;
        while (courseList.size() > counter) 
        {      
            course = courseList.get(counter);
            String CourseID = course.getCourseID();
            
            Object[] row = { CourseID };
            EditCoursesAvalibleTableModel.addRow(row);

            counter++;
        }
    }

    private void RefreshSemester_DATAONLY()
    {
        semesterList.clear();
        Main_Semester semester;
        
        try
        {
            String Query = "SELECT * FROM Semester";
            ResultSet result = Data_Update.ConncetToDatabase(Query);
            
            while (result.next()) 
            {
                //Create object
                semester = new Main_Semester();

                //Add data to object
                semester.setsemYear(result.getString(1));
                semester.setSeason(result.getString(2));

                //Add object to List
                semesterList.add(semester);
            }
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void RefreshLocation_DATAONLY()
    {
        locationList.clear();
        Main_Location location;
            
        try
        {
            String Query = "SELECT * FROM Location";
            ResultSet result = Data_Update.ConncetToDatabase(Query);
            
            while (result.next()) 
            {
                //Create object
                location = new Main_Location();

                //Add data to object
                location.setCampus(result.getString(1));
                location.setRoomNo(result.getString(2));
                location.setComputersAvalible(result.getString(3));

                //Add object to List
                locationList.add(location);
            }
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    ////////////////////////////////////////////////////////////////////////////
            
    private void LoadSection()
    {
        RefreshSection_EDIT_ADD();
        if (SectionTable.getSelectionModel().isSelectionEmpty() == true)
        {
            ErrorNoTableRow();
        }
        else
        {
            Main_Section section;
            int SectionRow = SectionTable.getSelectedRow();

            section = sectionList.get(SectionRow);

            //create other objects and reference them from section object
            Main_Course course;
            course = section.getCourse();

            Main_Location location;
            location = section.getLocation();

            Main_Teacher teacher;
            teacher = section.getTeacher();

            Main_Semester semester;
            semester = section.getSemester();

            Main_Time timeSlot;
            timeSlot = section.getTimeSlot();

            //variables for the section object
            String CRNID = section.getCRNID();
            String sectionID = section.getSectionID();
            String courseID = course.getCourseID();
            String roomNo = location.getRoomNo();
            String KPUID = teacher.getKPUID();
            String season = semester.getSeason();
            //int time = timeSlot.getTime(); //tried using int here. Not sure how time slots are stored

            //set UI
            EditCRNIDTF.setText(CRNID);
            EditSectionIDTF.setText(sectionID);
            EditCourseComboB.setSelectedItem(courseID);
            EditLocationComboB.setSelectedItem(roomNo);
            EditTeacherComboB.setSelectedItem(KPUID);
            EditSemesterComboB.setSelectedItem(season);

            //double check this one
            //EditSectionTimeComboB.setSelectedItem(time);
            
            SectionEditDialog.setModal(true);
            SectionEditDialog.setVisible(true);
        }
    }
    
    private void LoadCourse()
    {
        if (CourseTable.getSelectionModel().isSelectionEmpty() == true)
        {
            ErrorNoTableRow();
        }
        else
        {
            Main_Course course;
            int CourseRow = CourseTable.getSelectedRow();

            course = courseList.get(CourseRow);
            
            //Grabbing the Values to be Edited
            String courseID = course.getCourseID();
            String courseName = course.getCourseName();
            String yearToBeTaken = course.getYearToBeTaken();
            String program = course.getProgram();
            String computersNeeded = course.getComputersNeeded();
            boolean BOOLcomputersNeeded;
            
            if ("0".equals(computersNeeded))
            {
                BOOLcomputersNeeded = false;
            }
            else
            {
                BOOLcomputersNeeded = true;
            }
            
            //Setting the new UI
            EditCourseIDTF.setText(courseID);
            EditCourseNameTF.setText(courseName);
            EditProgramComboB.setSelectedItem(program);
            EditCourseYearComboB.setSelectedItem(yearToBeTaken);
            EditComputersNeededCheckB.setSelected(BOOLcomputersNeeded);
            
            CourseEditDialog.setModal(true);
            CourseEditDialog.setVisible(true);
        }
    }
    
    private void LoadTeacher()
    {
        RefreshTeacher_EDIT_ADD();
        if (TeacherTable.getSelectionModel().isSelectionEmpty() == true)
        {
            ErrorNoTableRow();

        }
        else
        {
            Main_Teacher teacher;
            int TeacherRow = TeacherTable.getSelectedRow();

            teacher = teacherList.get(TeacherRow);

            String KPUID = teacher.getKPUID();
            String firstName = teacher.getFirstName();
            String lastName = teacher.getLastName();

            //Set UI
            EditKPUIDTF.setText(KPUID);
            EditFirstNameTF.setText(firstName);
            EditLastNameTF.setText(lastName);

            TeacherEditDialog.setModal(true);
            TeacherEditDialog.setVisible(true);
        }
    }
    
    private void LoadSemester()
    {
        if (SemesterTable.getSelectionModel().isSelectionEmpty() == true)
        {
            ErrorNoTableRow();
        }
        else
        {
            Main_Semester semester;
            int SemesterRow = SemesterTable.getSelectedRow();

            semester = semesterList.get(SemesterRow);

            String semYear = semester.getsemYear();
            String season = semester.getSeason();

            //set UI
            EditYearTF.setText(semYear);
            EditSeasonComboB.setSelectedItem(season);
            
            SemesterEditDialog.setModal(true);
            SemesterEditDialog.setVisible(true);
        }
   }
    
    private void LoadLocation()
    {
        if (LocationTable.getSelectionModel().isSelectionEmpty() == true)
        {
            ErrorNoTableRow();
        }
        else
        {
            Main_Location location;
            int LocationRow = LocationTable.getSelectedRow();

            location = locationList.get(LocationRow);

            String campus = location.getCampus();
            String roomNo = location.getRoomNo();
            String computersNeeded = location.getComputersAvalible();
            boolean BOOLcomputersNeeded;

            if ("0".equals(computersNeeded))
            {
                BOOLcomputersNeeded = false;
            }
            else
            {
                BOOLcomputersNeeded = true;
            }

            //set UI
            EditCampusComboB.setSelectedItem(campus);
            EditRoomNumberTF.setText(roomNo);
            EditComputersAvalibleCheckB.setSelected(BOOLcomputersNeeded);
            
            LocationEditDialog.setModal(true);
            LocationEditDialog.setVisible(true);
        }
    }
    
    private void LoadTeacherCourses()
    {
        if (TeacherTable.getSelectionModel().isSelectionEmpty() == true)
        {
            ErrorNoTableRow();
        }
        else
        {
            DefaultTableModel TeacherCoursesTableModel = (DefaultTableModel) TeacherCoursesTable.getModel();
            TeacherCoursesTableModel.setRowCount(0);
            
            Main_Teacher teacher;
            
            ArrayList<String> CourseListings;
            int counter = 0;
            int TeacherRow = TeacherTable.getSelectedRow();
            teacher = teacherList.get(TeacherRow);
            
            while (teacher.getTeachableCourses().size() > counter)
            {
                CourseListings = teacher.getTeachableCourses();
                
                Object[] row = { CourseListings.get(counter) };
                TeacherCoursesTableModel.addRow(row);
                
                counter++;
            } 
        }
    }
    
    private void LoadTeacherCourses_EDIT()
    {
        DefaultTableModel EditTeachableCoursesTableModel = (DefaultTableModel) EditTeachableCoursesTable.getModel();
        EditTeachableCoursesTableModel.setRowCount(0);

        Main_Teacher teacher;

        ArrayList<String> CourseListings;
        int counter = 0;
        int TeacherRow = TeacherTable.getSelectedRow();
        teacher = teacherList.get(TeacherRow);
        CourseListings = teacher.getTeachableCourses();
        JOptionPane.showMessageDialog(null, CourseListings.size() + teacher.getFirstName());
        while (CourseListings.size() > counter)
        {
            Object[] row = { CourseListings.get(counter) };
            EditTeachableCoursesTableModel.addRow(row);

            counter++;
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    
    private void EditSection()
    {
        AddEditedSection();
        CloseSection();
        RefreshSection();
    }
    
    private void EditCourse()
    {
        AddEditedCourse();
        CloseCourse();
        RefreshCourse();
    }
    
    private void EditTeacher()
    {
        AddEditedTeacher();
        CloseTeacher();
        RefreshTeacher();
    }
   
    private void EditLocation()
    {
        AddEditedLocation();
        CloseLocation();
        RefreshLocation();
    }
    
    private void EditSemester()
    {
        AddEditedSemester();
        CloseSemester();
        RefreshSemester();
    }
    
    ////////////////////////////////////////////////////////////////////////////
    
    private void CloseSection()
    {
        SectionEditDialog.setModal(false);
        SectionEditDialog.setVisible(false);
    }
    
    private void CloseCourse()
    {
        CourseEditDialog.setModal(false);
        CourseEditDialog.setVisible(false);
    }
    
    private void CloseTeacher()
    {
        TeacherEditDialog.setModal(false);
        TeacherEditDialog.setVisible(false);
    }
    
    private void CloseSemester()
    {
        SemesterEditDialog.setModal(false);
        SemesterEditDialog.setVisible(false);
    }
    
    private void CloseLocation()
    {
        LocationEditDialog.setModal(false);
        LocationEditDialog.setVisible(false);
    }
    
    ////////////////////////////////////////////////////////////////////////////
    
    private void ErrorEmptyTF()
    {
        JOptionPane.showMessageDialog(null, "Text Fields Cannot be Empty");
    }
    
    private void ErrorNoTableRow()
    {
        JOptionPane.showMessageDialog(null, "Please Select a Row");
    }

    private void ErrorNoData()
    {
        JOptionPane.showMessageDialog(null, "Please Refresh Data");
    }
    
    private void ErrorInvalidEntry()
    {
        JOptionPane.showMessageDialog(null, "Invalid Data Entry");
    }
    
    ////////////////////////////////////////////////////////////////////////////
    
    private String TimeINTtoSTRING(int OldTime)
    {
        String NewTime = "";
        switch (OldTime)
        {
            case 1:
                NewTime = "Monday";
                break;
            case 2:
                NewTime = "Tuesday";
                break;
            case 3:
                NewTime = "Wednesday";
                break;   
            case 4:
                NewTime = "Thursday";
                break;    
            case 5:
                NewTime = "Friday";
                break;   
            case 6:
                NewTime = "Saturday";
                break; 
        }
        return NewTime;
    }
    
    private String DayINTtoSTRING(int OldDay)
    {
        String NewDay = "";
        switch (OldDay)
        {
            case 1:
                NewDay = "Monday";
                break;
            case 2:
                NewDay = "Tuesday";
                break;
            case 3:
                NewDay = "Wednesday";
                break;   
            case 4:
                NewDay = "Thursday";
                break;    
            case 5:
                NewDay = "Friday";
                break;   
            case 6:
                NewDay = "Saturday";
                break; 
        }
        return NewDay;
    }
     
    private Integer TimeTablesSTRINGtoINT()
    {
        int NewValue = 0;
        
        
        return NewValue;
    }
    
    private String TimeTablesINTtoSTRING()
    {
        String NewValue = "";
        
        return NewValue;
    }

    private Main_Course CourseIDReference(String courseID)
    {
        RefreshCourse_DATAONLY();
        Main_Course course;
        int counter = 0;

        while (courseList.size() > counter)
        {
            course = courseList.get(counter);
            if(course.getCourseID().equals(courseID))
            {
                return course;
            }
            counter++;
        }
        return null;
    }
    
    ////////////////////////////////////////////////////////////////////////////
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame_App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame_App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame_App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame_App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrame_App().setVisible(true);
                
                //Refresh ALL on startup ???
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddLocation;
    private javax.swing.JButton AddSection;
    private javax.swing.JButton AddSelectedCourse;
    private javax.swing.JButton AddSemester;
    private javax.swing.JButton AddTeacher;
    private javax.swing.JProgressBar AutoSchedulingProgressBar;
    private javax.swing.JButton AutoSectionsToLocations;
    private javax.swing.JButton AutoSectionsToTeachers;
    private javax.swing.JTextField CRNIDTF;
    private javax.swing.JComboBox<String> CampusComboB;
    private javax.swing.JCheckBox ComputersAvalibleCheckB;
    private javax.swing.JCheckBox ComputersNeededCheckB;
    private javax.swing.JButton CourseAdd;
    private javax.swing.JComboBox<String> CourseComboB;
    private javax.swing.JButton CourseEdit;
    private javax.swing.JDialog CourseEditDialog;
    private javax.swing.JTextField CourseIDTF;
    private javax.swing.JTextField CourseNameTF;
    private javax.swing.JPanel CoursePanel;
    private javax.swing.JButton CourseRefresh;
    private javax.swing.JButton CourseRemove;
    private javax.swing.JScrollPane CourseScrollPane;
    private javax.swing.JTable CourseTable;
    private javax.swing.JComboBox<String> CourseYearComboB;
    private javax.swing.JTable CoursesAvalibleTable;
    private javax.swing.JButton EditAddLocation;
    private javax.swing.JButton EditAddSection;
    private javax.swing.JButton EditAddSelectedCourse;
    private javax.swing.JButton EditAddSemester;
    private javax.swing.JTextField EditCRNIDTF;
    private javax.swing.JComboBox<String> EditCampusComboB;
    private javax.swing.JCheckBox EditComputersAvalibleCheckB;
    private javax.swing.JCheckBox EditComputersNeededCheckB;
    private javax.swing.JButton EditCourseChange;
    private javax.swing.JComboBox<String> EditCourseComboB;
    private javax.swing.JTextField EditCourseIDTF;
    private javax.swing.JTextField EditCourseNameTF;
    private javax.swing.JComboBox<String> EditCourseYearComboB;
    private javax.swing.JTable EditCoursesAvalibleTable;
    private javax.swing.JTextField EditFirstNameTF;
    private javax.swing.JTextField EditKPUIDTF;
    private javax.swing.JTextField EditLastNameTF;
    private javax.swing.JButton EditLocation;
    private javax.swing.JComboBox<String> EditLocationComboB;
    private javax.swing.JComboBox<String> EditProgramComboB;
    private javax.swing.JButton EditRemoveSelectedCourse;
    private javax.swing.JTextField EditRoomNumberTF;
    private javax.swing.JComboBox<String> EditSeasonComboB;
    private javax.swing.JButton EditSection;
    private javax.swing.JTextField EditSectionIDTF;
    private javax.swing.JCheckBox EditSectionLoactionCheckB;
    private javax.swing.JCheckBox EditSectionTeacherCheckB;
    private javax.swing.JCheckBox EditSectionTimeCheckB;
    private javax.swing.JComboBox<String> EditSectionTimeComboB;
    private javax.swing.JButton EditSemester;
    private javax.swing.JComboBox<String> EditSemesterComboB;
    private javax.swing.JTable EditTeachableCoursesTable;
    private javax.swing.JButton EditTeacher;
    private javax.swing.JButton EditTeacherChange;
    private javax.swing.JComboBox<String> EditTeacherComboB;
    private javax.swing.JTextField EditYearTF;
    private javax.swing.JTextField FirstNameTF;
    private javax.swing.JLabel Image_CourseLeft;
    private javax.swing.JLabel Image_CourseMini;
    private javax.swing.JLabel Image_CourseTop;
    private javax.swing.JLabel Image_ScheduleLeft;
    private javax.swing.JLabel Image_ScheduleMini;
    private javax.swing.JLabel Image_ScheduleTop;
    private javax.swing.JLabel Image_SectionLeft;
    private javax.swing.JLabel Image_SectionMini;
    private javax.swing.JLabel Image_SectionTop;
    private javax.swing.JLabel Image_SemesterLocationLeft;
    private javax.swing.JLabel Image_SemesterLocationMini;
    private javax.swing.JLabel Image_SemesterLocationTop;
    private javax.swing.JLabel Image_TeacherLeft;
    private javax.swing.JLabel Image_TeacherMini;
    private javax.swing.JLabel Image_TeacherTop;
    private javax.swing.JTextField KPUIDTF;
    private javax.swing.JTextField LastNameTF;
    private javax.swing.JComboBox<String> LocationComboB;
    private javax.swing.JDialog LocationEditDialog;
    private javax.swing.JPanel LocationPanel;
    private javax.swing.JScrollPane LocationScrollPane;
    private javax.swing.JTable LocationTable;
    private javax.swing.JComboBox<String> ProgramComboB;
    private javax.swing.JButton RefreshLocation;
    private javax.swing.JButton RefreshSchedule;
    private javax.swing.JButton RefreshSection;
    private javax.swing.JButton RefreshSectionAddition;
    private javax.swing.JButton RefreshSemester;
    private javax.swing.JButton RefreshTeacherTwo;
    private javax.swing.JButton RemoveLocation;
    private javax.swing.JButton RemoveSection;
    private javax.swing.JButton RemoveSelectedCourse;
    private javax.swing.JButton RemoveSemester;
    private javax.swing.JButton RemoveTeacher;
    private javax.swing.JTextField RoomNumberTF;
    private javax.swing.JPanel SchedulePanel;
    private javax.swing.JComboBox<String> ScheduleSemesterComboB;
    private javax.swing.JComboBox<String> ScheduleTeacherComboB;
    private javax.swing.JTable ScheduleTeacherSectionsTable;
    private javax.swing.JTable SchedulueTable;
    private javax.swing.JComboBox<String> SeasonComboB;
    private javax.swing.JDialog SectionEditDialog;
    private javax.swing.JTextField SectionIDTF;
    private javax.swing.JPanel SectionPanel;
    private javax.swing.JTable SectionTable;
    private javax.swing.JComboBox<String> SectionTimeComboB;
    private javax.swing.JComboBox<String> SemesterComboB;
    private javax.swing.JDialog SemesterEditDialog;
    private javax.swing.JPanel SemesterLocationPanel;
    private javax.swing.JPanel SemesterPanel;
    private javax.swing.JScrollPane SemesterScrollPane;
    private javax.swing.JTable SemesterTable;
    private javax.swing.JButton ShowTeacherClasses;
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JTable TeachableCoursesTable;
    private javax.swing.JComboBox<String> TeacherComboB;
    private javax.swing.JTable TeacherCoursesTable;
    private javax.swing.JDialog TeacherEditDialog;
    private javax.swing.JPanel TeacherPanel;
    private javax.swing.JButton TeacherRefresh;
    private javax.swing.JTable TeacherTable;
    private javax.swing.JTextField YearTF;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    // End of variables declaration//GEN-END:variables
}
